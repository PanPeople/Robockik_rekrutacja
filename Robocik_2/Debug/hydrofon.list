
hydrofon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005338  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080053f4  080053f4  000153f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b8  080054b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054c0  080054c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080054c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  080054d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080054d4  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f354  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002323  00000000  00000000  0002f388  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  000316b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  00032620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000177b0  00000000  00000000  00033458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d50b  00000000  00000000  0004ac08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096516  00000000  00000000  00058113  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee629  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000373c  00000000  00000000  000ee6a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080053dc 	.word	0x080053dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080053dc 	.word	0x080053dc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	0018      	movs	r0, r3
 8000612:	230c      	movs	r3, #12
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f004 fed8 	bl	80053cc <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061c:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <MX_ADC1_Init+0xcc>)
 800061e:	4a2e      	ldr	r2, [pc, #184]	; (80006d8 <MX_ADC1_Init+0xd0>)
 8000620:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000622:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	05d2      	lsls	r2, r2, #23
 8000628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062a:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <MX_ADC1_Init+0xcc>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000636:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_ADC1_Init+0xcc>)
 800063e:	2204      	movs	r2, #4
 8000640:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000642:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000644:	2200      	movs	r2, #0
 8000646:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xcc>)
 800064a:	2200      	movs	r2, #0
 800064c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000650:	2200      	movs	r2, #0
 8000652:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065a:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC1_Init+0xcc>)
 800065c:	2220      	movs	r2, #32
 800065e:	2100      	movs	r1, #0
 8000660:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000668:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_ADC1_Init+0xcc>)
 800066a:	2200      	movs	r2, #0
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000670:	222c      	movs	r2, #44	; 0x2c
 8000672:	2100      	movs	r1, #0
 8000674:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000678:	2200      	movs	r2, #0
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_ADC1_Init+0xcc>)
 800067e:	2200      	movs	r2, #0
 8000680:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000684:	2200      	movs	r2, #0
 8000686:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_ADC1_Init+0xcc>)
 800068a:	223c      	movs	r2, #60	; 0x3c
 800068c:	2100      	movs	r1, #0
 800068e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000692:	2200      	movs	r2, #0
 8000694:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_ADC1_Init+0xcc>)
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fd71 	bl	8001180 <HAL_ADC_Init>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80006a2:	f000 f929 	bl	80008f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2201      	movs	r2, #1
 80006aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	1d3a      	adds	r2, r7, #4
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_ADC1_Init+0xcc>)
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 ff8e 	bl	80015e0 <HAL_ADC_ConfigChannel>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80006c8:	f000 f916 	bl	80008f8 <Error_Handler>
  }

}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b004      	add	sp, #16
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000028 	.word	0x20000028
 80006d8:	40012400 	.word	0x40012400

080006dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	2314      	movs	r3, #20
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	0018      	movs	r0, r3
 80006ea:	2314      	movs	r3, #20
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f004 fe6c 	bl	80053cc <memset>
  if(adcHandle->Instance==ADC1)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a18      	ldr	r2, [pc, #96]	; (800075c <HAL_ADC_MspInit+0x80>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d12a      	bne.n	8000754 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_ADC_MspInit+0x84>)
 8000700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <HAL_ADC_MspInit+0x84>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	0349      	lsls	r1, r1, #13
 8000708:	430a      	orrs	r2, r1
 800070a:	641a      	str	r2, [r3, #64]	; 0x40
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_ADC_MspInit+0x84>)
 800070e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	035b      	lsls	r3, r3, #13
 8000714:	4013      	ands	r3, r2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_ADC_MspInit+0x84>)
 800071c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <HAL_ADC_MspInit+0x84>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <HAL_ADC_MspInit+0x84>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072a:	2201      	movs	r2, #1
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000732:	2114      	movs	r1, #20
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2203      	movs	r2, #3
 800073e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	187a      	adds	r2, r7, r1
 8000748:	23a0      	movs	r3, #160	; 0xa0
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f001 fa54 	bl	8001bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b00a      	add	sp, #40	; 0x28
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40012400 	.word	0x40012400
 8000760:	40021000 	.word	0x40021000

08000764 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_GPIO_Init+0x40>)
 800076c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_GPIO_Init+0x40>)
 8000770:	2102      	movs	r1, #2
 8000772:	430a      	orrs	r2, r1
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_GPIO_Init+0x40>)
 8000778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800077a:	2202      	movs	r2, #2
 800077c:	4013      	ands	r3, r2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_GPIO_Init+0x40>)
 8000784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_GPIO_Init+0x40>)
 8000788:	2101      	movs	r1, #1
 800078a:	430a      	orrs	r2, r1
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <MX_GPIO_Init+0x40>)
 8000790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000792:	2201      	movs	r2, #1
 8000794:	4013      	ands	r3, r2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fb56 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f81a 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f7ff ffd6 	bl	8000764 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007b8:	f7ff ff26 	bl	8000608 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80007bc:	f000 fa8a 	bl	8000cd4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80007c0:	f000 f8f6 	bl	80009b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007c4:	f000 f9c0 	bl	8000b48 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007c8:	f000 f876 	bl	80008b8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <main+0x38>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 feac 	bl	800152c <HAL_ADC_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <main+0x3c>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f002 fa30 	bl	8002c3c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <main+0x34>
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000028 	.word	0x20000028
 80007e4:	200000cc 	.word	0x200000cc

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b09d      	sub	sp, #116	; 0x74
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	2438      	movs	r4, #56	; 0x38
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	2338      	movs	r3, #56	; 0x38
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f004 fde7 	bl	80053cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fe:	2328      	movs	r3, #40	; 0x28
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	0018      	movs	r0, r3
 8000804:	2310      	movs	r3, #16
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f004 fddf 	bl	80053cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080e:	003b      	movs	r3, r7
 8000810:	0018      	movs	r0, r3
 8000812:	2328      	movs	r3, #40	; 0x28
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f004 fdd8 	bl	80053cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	0018      	movs	r0, r3
 8000822:	f001 fb4f 	bl	8001ec4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2202      	movs	r2, #2
 800082a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	0052      	lsls	r2, r2, #1
 8000832:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2240      	movs	r2, #64	; 0x40
 800083e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	193b      	adds	r3, r7, r4
 8000848:	0018      	movs	r0, r3
 800084a:	f001 fb87 	bl	8001f5c <HAL_RCC_OscConfig>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000852:	f000 f851 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	2128      	movs	r1, #40	; 0x28
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2207      	movs	r2, #7
 800085c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2100      	movs	r1, #0
 8000874:	0018      	movs	r0, r3
 8000876:	f001 fe91 	bl	800259c <HAL_RCC_ClockConfig>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800087e:	f000 f83b 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC
 8000882:	003b      	movs	r3, r7
 8000884:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <SystemClock_Config+0xcc>)
 8000886:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000888:	003b      	movs	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800088e:	003b      	movs	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000894:	003b      	movs	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089a:	003b      	movs	r3, r7
 800089c:	0018      	movs	r0, r3
 800089e:	f002 f827 	bl	80028f0 <HAL_RCCEx_PeriphCLKConfig>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008a6:	f000 f827 	bl	80008f8 <Error_Handler>
  }
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b01d      	add	sp, #116	; 0x74
 80008b0:	bd90      	pop	{r4, r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	00204001 	.word	0x00204001

080008b8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	200f      	movs	r0, #15
 80008c2:	f001 f969 	bl	8001b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008c6:	200f      	movs	r0, #15
 80008c8:	f001 f97b 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

	uint8_t adcValue = HAL_ADC_GetValue(&hadc1);
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fe72 	bl	80015c8 <HAL_ADC_GetValue>
 80008e4:	0002      	movs	r2, r0
 80008e6:	230f      	movs	r3, #15
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	701a      	strb	r2, [r3, #0]

	//send UART data with pulling
	if (adcValue >= 2000){

	}
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b004      	add	sp, #16
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000028 	.word	0x20000028

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x44>)
 800090c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_MspInit+0x44>)
 8000910:	2101      	movs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	641a      	str	r2, [r3, #64]	; 0x40
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_MspInit+0x44>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	2201      	movs	r2, #1
 800091c:	4013      	ands	r3, r2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x44>)
 8000924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_MspInit+0x44>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	0549      	lsls	r1, r1, #21
 800092c:	430a      	orrs	r2, r1
 800092e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_MspInit+0x44>)
 8000932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	055b      	lsls	r3, r3, #21
 8000938:	4013      	ands	r3, r2
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40021000 	.word	0x40021000

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 fadc 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <TIM2_IRQHandler+0x14>)
 8000986:	0018      	movs	r0, r3
 8000988:	f002 f9b6 	bl	8002cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	200000cc 	.word	0x200000cc

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <SystemInit+0x14>)
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	0512      	lsls	r2, r2, #20
 80009a2:	609a      	str	r2, [r3, #8]
#endif
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09c      	sub	sp, #112	; 0x70
 80009b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	2360      	movs	r3, #96	; 0x60
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	0018      	movs	r0, r3
 80009bc:	2310      	movs	r3, #16
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f004 fd03 	bl	80053cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c6:	2354      	movs	r3, #84	; 0x54
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	0018      	movs	r0, r3
 80009cc:	230c      	movs	r3, #12
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f004 fcfb 	bl	80053cc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	2338      	movs	r3, #56	; 0x38
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	0018      	movs	r0, r3
 80009dc:	231c      	movs	r3, #28
 80009de:	001a      	movs	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f004 fcf3 	bl	80053cc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	0018      	movs	r0, r3
 80009ea:	2334      	movs	r3, #52	; 0x34
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f004 fcec 	bl	80053cc <memset>

  htim1.Instance = TIM1;
 80009f4:	4b51      	ldr	r3, [pc, #324]	; (8000b3c <MX_TIM1_Init+0x18c>)
 80009f6:	4a52      	ldr	r2, [pc, #328]	; (8000b40 <MX_TIM1_Init+0x190>)
 80009f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009fa:	4b50      	ldr	r3, [pc, #320]	; (8000b3c <MX_TIM1_Init+0x18c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b4e      	ldr	r3, [pc, #312]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a06:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a08:	4a4e      	ldr	r2, [pc, #312]	; (8000b44 <MX_TIM1_Init+0x194>)
 8000a0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a12:	4b4a      	ldr	r3, [pc, #296]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a18:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a1e:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 f8df 	bl	8002be4 <HAL_TIM_Base_Init>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000a2a:	f7ff ff65 	bl	80008f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	2160      	movs	r1, #96	; 0x60
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	0152      	lsls	r2, r2, #5
 8000a36:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a38:	187a      	adds	r2, r7, r1
 8000a3a:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f002 fb8a 	bl	8003158 <HAL_TIM_ConfigClockSource>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000a48:	f7ff ff56 	bl	80008f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a4c:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 f91e 	bl	8002c90 <HAL_TIM_PWM_Init>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a58:	f7ff ff4e 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	2154      	movs	r1, #84	; 0x54
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a70:	187a      	adds	r2, r7, r1
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f002 fffc 	bl	8003a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000a80:	f7ff ff3a 	bl	80008f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a84:	2138      	movs	r1, #56	; 0x38
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2260      	movs	r2, #96	; 0x60
 8000a8a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f002 fa50 	bl	8002f5c <HAL_TIM_PWM_ConfigChannel>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000ac0:	f7ff ff1a 	bl	80008f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	0192      	lsls	r2, r2, #6
 8000ae8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	0492      	lsls	r2, r2, #18
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b16:	1d3a      	adds	r2, r7, #4
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f002 ffff 	bl	8003b20 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000b26:	f7ff fee7 	bl	80008f8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 f893 	bl	8000c58 <HAL_TIM_MspPostInit>

}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b01c      	add	sp, #112	; 0x70
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	2000008c 	.word	0x2000008c
 8000b40:	40012c00 	.word	0x40012c00
 8000b44:	0000ffff 	.word	0x0000ffff

08000b48 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	2310      	movs	r3, #16
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	0018      	movs	r0, r3
 8000b54:	2310      	movs	r3, #16
 8000b56:	001a      	movs	r2, r3
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f004 fc37 	bl	80053cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	0018      	movs	r0, r3
 8000b62:	230c      	movs	r3, #12
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f004 fc30 	bl	80053cc <memset>

  htim2.Instance = TIM2;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	05d2      	lsls	r2, r2, #23
 8000b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b76:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <MX_TIM2_Init+0xa8>)
 8000b78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b82:	22fa      	movs	r2, #250	; 0xfa
 8000b84:	00d2      	lsls	r2, r2, #3
 8000b86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f002 f824 	bl	8002be4 <HAL_TIM_Base_Init>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ba0:	f7ff feaa 	bl	80008f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	0152      	lsls	r2, r2, #5
 8000bac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bae:	187a      	adds	r2, r7, r1
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f002 facf 	bl	8003158 <HAL_TIM_ConfigClockSource>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000bbe:	f7ff fe9b 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bce:	1d3a      	adds	r2, r7, #4
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 ff4d 	bl	8003a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000bde:	f7ff fe8b 	bl	80008f8 <Error_Handler>
  }

}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b008      	add	sp, #32
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	200000cc 	.word	0x200000cc
 8000bf0:	00003e7f 	.word	0x00003e7f

08000bf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <HAL_TIM_Base_MspInit+0x5c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d10e      	bne.n	8000c24 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_TIM_Base_MspInit+0x60>)
 8000c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_TIM_Base_MspInit+0x60>)
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	0109      	lsls	r1, r1, #4
 8000c10:	430a      	orrs	r2, r1
 8000c12:	641a      	str	r2, [r3, #64]	; 0x40
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_TIM_Base_MspInit+0x60>)
 8000c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c22:	e011      	b.n	8000c48 <HAL_TIM_Base_MspInit+0x54>
  else if(tim_baseHandle->Instance==TIM2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d10b      	bne.n	8000c48 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_TIM_Base_MspInit+0x60>)
 8000c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <HAL_TIM_Base_MspInit+0x60>)
 8000c36:	2101      	movs	r1, #1
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_TIM_Base_MspInit+0x60>)
 8000c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c40:	2201      	movs	r2, #1
 8000c42:	4013      	ands	r3, r2
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b004      	add	sp, #16
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40012c00 	.word	0x40012c00
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	230c      	movs	r3, #12
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	0018      	movs	r0, r3
 8000c66:	2314      	movs	r3, #20
 8000c68:	001a      	movs	r2, r3
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	f004 fbae 	bl	80053cc <memset>
  if(timHandle->Instance==TIM1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <HAL_TIM_MspPostInit+0x74>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d123      	bne.n	8000cc2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_TIM_MspPostInit+0x78>)
 8000c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_TIM_MspPostInit+0x78>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	635a      	str	r2, [r3, #52]	; 0x34
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_TIM_MspPostInit+0x78>)
 8000c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c92:	210c      	movs	r1, #12
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	0052      	lsls	r2, r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	187a      	adds	r2, r7, r1
 8000cb6:	23a0      	movs	r3, #160	; 0xa0
 8000cb8:	05db      	lsls	r3, r3, #23
 8000cba:	0011      	movs	r1, r2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f000 ff9d 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b008      	add	sp, #32
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	40012c00 	.word	0x40012c00
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000cda:	4a24      	ldr	r2, [pc, #144]	; (8000d6c <MX_USART1_UART_Init+0x98>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cde:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000ce0:	22e1      	movs	r2, #225	; 0xe1
 8000ce2:	0252      	lsls	r2, r2, #9
 8000ce4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f002 ffbc 	bl	8003c9c <HAL_UART_Init>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d28:	f7ff fde6 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000d2e:	2100      	movs	r1, #0
 8000d30:	0018      	movs	r0, r3
 8000d32:	f004 fa3b 	bl	80051ac <HAL_UARTEx_SetTxFifoThreshold>
 8000d36:	1e03      	subs	r3, r0, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d3a:	f7ff fddd 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000d40:	2100      	movs	r1, #0
 8000d42:	0018      	movs	r0, r3
 8000d44:	f004 fa72 	bl	800522c <HAL_UARTEx_SetRxFifoThreshold>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d4c:	f7ff fdd4 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <MX_USART1_UART_Init+0x94>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f004 f9f0 	bl	8005138 <HAL_UARTEx_DisableFifoMode>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d5c:	f7ff fdcc 	bl	80008f8 <Error_Handler>
  }

}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	2000010c 	.word	0x2000010c
 8000d6c:	40013800 	.word	0x40013800

08000d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	2314      	movs	r3, #20
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	2314      	movs	r3, #20
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f004 fb22 	bl	80053cc <memset>
  if(uartHandle->Instance==USART1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <HAL_UART_MspInit+0x8c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d12f      	bne.n	8000df2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_UART_MspInit+0x90>)
 8000d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <HAL_UART_MspInit+0x90>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	01c9      	lsls	r1, r1, #7
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_UART_MspInit+0x90>)
 8000da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	01db      	lsls	r3, r3, #7
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_UART_MspInit+0x90>)
 8000db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <HAL_UART_MspInit+0x90>)
 8000db4:	2102      	movs	r1, #2
 8000db6:	430a      	orrs	r2, r1
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_UART_MspInit+0x90>)
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000dc6:	2114      	movs	r1, #20
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	22c0      	movs	r2, #192	; 0xc0
 8000dcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <HAL_UART_MspInit+0x94>)
 8000dea:	0019      	movs	r1, r3
 8000dec:	0010      	movs	r0, r2
 8000dee:	f000 ff05 	bl	8001bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b00a      	add	sp, #40	; 0x28
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	40013800 	.word	0x40013800
 8000e00:	40021000 	.word	0x40021000
 8000e04:	50000400 	.word	0x50000400

08000e08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e0e:	e003      	b.n	8000e18 <LoopCopyDataInit>

08000e10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000e12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e16:	3104      	adds	r1, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <LoopForever+0xa>)
  ldr r3, =_edata
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <LoopForever+0xe>)
  adds r2, r0, r1
 8000e1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e20:	d3f6      	bcc.n	8000e10 <CopyDataInit>
  ldr r2, =_sbss
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <LoopForever+0x12>)
  b LoopFillZerobss
 8000e24:	e002      	b.n	8000e2c <LoopFillZerobss>

08000e26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  str  r3, [r2]
 8000e28:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2a:	3204      	adds	r2, #4

08000e2c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <LoopForever+0x16>)
  cmp r2, r3
 8000e2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e30:	d3f9      	bcc.n	8000e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e32:	f7ff fdb1 	bl	8000998 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e36:	f004 faa5 	bl	8005384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3a:	f7ff fcb5 	bl	80007a8 <main>

08000e3e <LoopForever>:

LoopForever:
    b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   r0, =_estack
 8000e40:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8000e44:	080054c8 	.word	0x080054c8
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000e50:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000e54:	2000019c 	.word	0x2000019c

08000e58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x3c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_Init+0x3c>)
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	0049      	lsls	r1, r1, #1
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f810 	bl	8000e9c <HAL_InitTick>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e001      	b.n	8000e8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fd3c 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_InitTick+0x88>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d02b      	beq.n	8000f0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <HAL_InitTick+0x8c>)
 8000eb6:	681c      	ldr	r4, [r3, #0]
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_InitTick+0x88>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	23fa      	movs	r3, #250	; 0xfa
 8000ec0:	0098      	lsls	r0, r3, #2
 8000ec2:	f7ff f91f 	bl	8000104 <__udivsi3>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	0019      	movs	r1, r3
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f7ff f91a 	bl	8000104 <__udivsi3>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 fe85 	bl	8001be2 <HAL_SYSTICK_Config>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d112      	bne.n	8000f02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d80a      	bhi.n	8000ef8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fe54 	bl	8001b98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_InitTick+0x90>)
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e00d      	b.n	8000f14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ef8:	230f      	movs	r3, #15
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e008      	b.n	8000f14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f02:	230f      	movs	r3, #15
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e003      	b.n	8000f14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	781b      	ldrb	r3, [r3, #0]
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b005      	add	sp, #20
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_IncTick+0x18>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <HAL_IncTick+0x1c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	18d2      	adds	r2, r2, r3
 8000f3e:	4b02      	ldr	r3, [pc, #8]	; (8000f48 <HAL_IncTick+0x18>)
 8000f40:	601a      	str	r2, [r3, #0]
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000198 	.word	0x20000198
 8000f4c:	20000008 	.word	0x20000008

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <HAL_GetTick+0x10>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	20000198 	.word	0x20000198

08000f64 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000f74:	401a      	ands	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	fe3fffff 	.word	0xfe3fffff

08000f8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	23e0      	movs	r3, #224	; 0xe0
 8000f9a:	045b      	lsls	r3, r3, #17
 8000f9c:	4013      	ands	r3, r2
}
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b002      	add	sp, #8
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	2104      	movs	r1, #4
 8000fba:	400a      	ands	r2, r1
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	4091      	lsls	r1, r2
 8000fc0:	000a      	movs	r2, r1
 8000fc2:	43d2      	mvns	r2, r2
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2104      	movs	r1, #4
 8000fca:	400b      	ands	r3, r1
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4099      	lsls	r1, r3
 8000fd0:	000b      	movs	r3, r1
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	211f      	movs	r1, #31
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	4091      	lsls	r1, r2
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	43d2      	mvns	r2, r2
 8000ffe:	401a      	ands	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	0e9b      	lsrs	r3, r3, #26
 8001004:	210f      	movs	r1, #15
 8001006:	4019      	ands	r1, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	201f      	movs	r0, #31
 800100c:	4003      	ands	r3, r0
 800100e:	4099      	lsls	r1, r3
 8001010:	000b      	movs	r3, r1
 8001012:	431a      	orrs	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b004      	add	sp, #16
 800101e:	bd80      	pop	{r7, pc}

08001020 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	035b      	lsls	r3, r3, #13
 8001032:	0b5b      	lsrs	r3, r3, #13
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}

08001042 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	0352      	lsls	r2, r2, #13
 8001054:	0b52      	lsrs	r2, r2, #13
 8001056:	43d2      	mvns	r2, r2
 8001058:	401a      	ands	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	0212      	lsls	r2, r2, #8
 800107c:	43d2      	mvns	r2, r2
 800107e:	401a      	ands	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	400b      	ands	r3, r1
 8001088:	4904      	ldr	r1, [pc, #16]	; (800109c <LL_ADC_SetChannelSamplingTime+0x34>)
 800108a:	400b      	ands	r3, r1
 800108c:	431a      	orrs	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b004      	add	sp, #16
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	07ffff00 	.word	0x07ffff00

080010a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	0552      	lsls	r2, r2, #21
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	6fffffe8 	.word	0x6fffffe8

080010c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	055b      	lsls	r3, r3, #21
 80010d8:	401a      	ands	r2, r3
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	055b      	lsls	r3, r3, #21
 80010de:	429a      	cmp	r2, r3
 80010e0:	d101      	bne.n	80010e6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <LL_ADC_Enable+0x20>)
 80010fe:	4013      	ands	r3, r2
 8001100:	2201      	movs	r2, #1
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}
 8001110:	7fffffe8 	.word	0x7fffffe8

08001114 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2201      	movs	r2, #1
 8001122:	4013      	ands	r3, r2
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <LL_ADC_IsEnabled+0x18>
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <LL_ADC_IsEnabled+0x1a>
 800112c:	2300      	movs	r3, #0
}
 800112e:	0018      	movs	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	b002      	add	sp, #8
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <LL_ADC_REG_StartConversion+0x20>)
 8001146:	4013      	ands	r3, r2
 8001148:	2204      	movs	r2, #4
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b002      	add	sp, #8
 8001156:	bd80      	pop	{r7, pc}
 8001158:	7fffffe8 	.word	0x7fffffe8

0800115c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2204      	movs	r2, #4
 800116a:	4013      	ands	r3, r2
 800116c:	2b04      	cmp	r3, #4
 800116e:	d101      	bne.n	8001174 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001174:	2300      	movs	r3, #0
}
 8001176:	0018      	movs	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001188:	231f      	movs	r3, #31
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e1aa      	b.n	80014fc <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10a      	bne.n	80011c4 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fa93 	bl	80006dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2254      	movs	r2, #84	; 0x54
 80011c0:	2100      	movs	r1, #0
 80011c2:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ff7d 	bl	80010c8 <LL_ADC_IsInternalRegulatorEnabled>
 80011ce:	1e03      	subs	r3, r0, #0
 80011d0:	d114      	bne.n	80011fc <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff ff62 	bl	80010a0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80011dc:	4bc9      	ldr	r3, [pc, #804]	; (8001504 <HAL_ADC_Init+0x384>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	49c9      	ldr	r1, [pc, #804]	; (8001508 <HAL_ADC_Init+0x388>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7fe ff8e 	bl	8000104 <__udivsi3>
 80011e8:	0003      	movs	r3, r0
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80011ee:	e002      	b.n	80011f6 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f9      	bne.n	80011f0 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff ff61 	bl	80010c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d10f      	bne.n	800122a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	2210      	movs	r2, #16
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121a:	2201      	movs	r2, #1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8001222:	231f      	movs	r3, #31
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff ff94 	bl	800115c <LL_ADC_REG_IsConversionOngoing>
 8001234:	0003      	movs	r3, r0
 8001236:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	2210      	movs	r2, #16
 800123e:	4013      	ands	r3, r2
 8001240:	d000      	beq.n	8001244 <HAL_ADC_Init+0xc4>
 8001242:	e14e      	b.n	80014e2 <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d000      	beq.n	800124c <HAL_ADC_Init+0xcc>
 800124a:	e14a      	b.n	80014e2 <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	4aae      	ldr	r2, [pc, #696]	; (800150c <HAL_ADC_Init+0x38c>)
 8001252:	4013      	ands	r3, r2
 8001254:	2202      	movs	r2, #2
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff ff57 	bl	8001114 <LL_ADC_IsEnabled>
 8001266:	1e03      	subs	r3, r0, #0
 8001268:	d137      	bne.n	80012da <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2218      	movs	r2, #24
 8001272:	4393      	bics	r3, r2
 8001274:	0019      	movs	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	0899      	lsrs	r1, r3, #2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	0f9b      	lsrs	r3, r3, #30
 8001292:	079a      	lsls	r2, r3, #30
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	23c0      	movs	r3, #192	; 0xc0
 80012a2:	061b      	lsls	r3, r3, #24
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d018      	beq.n	80012da <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d012      	beq.n	80012da <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	061b      	lsls	r3, r3, #24
 80012bc:	429a      	cmp	r2, r3
 80012be:	d00c      	beq.n	80012da <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80012c0:	4b93      	ldr	r3, [pc, #588]	; (8001510 <HAL_ADC_Init+0x390>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a93      	ldr	r2, [pc, #588]	; (8001514 <HAL_ADC_Init+0x394>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	23f0      	movs	r3, #240	; 0xf0
 80012d0:	039b      	lsls	r3, r3, #14
 80012d2:	401a      	ands	r2, r3
 80012d4:	4b8e      	ldr	r3, [pc, #568]	; (8001510 <HAL_ADC_Init+0x390>)
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7e1b      	ldrb	r3, [r3, #24]
 80012de:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7e5b      	ldrb	r3, [r3, #25]
 80012e4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e9b      	ldrb	r3, [r3, #26]
 80012ec:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80012ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <HAL_ADC_Init+0x17e>
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	015b      	lsls	r3, r3, #5
 80012fc:	e000      	b.n	8001300 <HAL_ADC_Init+0x180>
 80012fe:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001300:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001306:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	2b00      	cmp	r3, #0
 800130e:	da04      	bge.n	800131a <HAL_ADC_Init+0x19a>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	085b      	lsrs	r3, r3, #1
 8001318:	e001      	b.n	800131e <HAL_ADC_Init+0x19e>
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 800131e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	212c      	movs	r1, #44	; 0x2c
 8001324:	5c5b      	ldrb	r3, [r3, r1]
 8001326:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8001328:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2220      	movs	r2, #32
 8001334:	5c9b      	ldrb	r3, [r3, r2]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d115      	bne.n	8001366 <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7e9b      	ldrb	r3, [r3, #26]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d105      	bne.n	800134e <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	0252      	lsls	r2, r2, #9
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	e00b      	b.n	8001366 <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	2220      	movs	r2, #32
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135e:	2201      	movs	r2, #1
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00a      	beq.n	8001384 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001372:	23e0      	movs	r3, #224	; 0xe0
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800137c:	4313      	orrs	r3, r2
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 800138c:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8001392:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8001398:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4313      	orrs	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	223c      	movs	r2, #60	; 0x3c
 80013a4:	5c9b      	ldrb	r3, [r3, r2]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d103      	bne.n	80013b2 <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4313      	orrs	r3, r2
 80013b0:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4a57      	ldr	r2, [pc, #348]	; (8001518 <HAL_ADC_Init+0x398>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	0019      	movs	r1, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	4a53      	ldr	r2, [pc, #332]	; (800151c <HAL_ADC_Init+0x39c>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	0019      	movs	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	430a      	orrs	r2, r1
 80013dc:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e6:	001a      	movs	r2, r3
 80013e8:	2100      	movs	r1, #0
 80013ea:	f7ff fddc 	bl	8000fa6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f6:	494a      	ldr	r1, [pc, #296]	; (8001520 <HAL_ADC_Init+0x3a0>)
 80013f8:	001a      	movs	r2, r3
 80013fa:	f7ff fdd4 	bl	8000fa6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2110      	movs	r1, #16
 8001412:	4249      	negs	r1, r1
 8001414:	430a      	orrs	r2, r1
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
 8001418:	e03c      	b.n	8001494 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	039b      	lsls	r3, r3, #14
 8001422:	429a      	cmp	r2, r3
 8001424:	d136      	bne.n	8001494 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	e00c      	b.n	8001446 <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	40da      	lsrs	r2, r3
 8001436:	0013      	movs	r3, r2
 8001438:	220f      	movs	r2, #15
 800143a:	4013      	ands	r3, r2
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d006      	beq.n	800144e <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	3301      	adds	r3, #1
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	2b07      	cmp	r3, #7
 800144a:	d9ef      	bls.n	800142c <HAL_ADC_Init+0x2ac>
 800144c:	e000      	b.n	8001450 <HAL_ADC_Init+0x2d0>
        {
          break;
 800144e:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d109      	bne.n	800146a <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2110      	movs	r1, #16
 8001462:	4249      	negs	r1, r1
 8001464:	430a      	orrs	r2, r1
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
 8001468:	e014      	b.n	8001494 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <HAL_ADC_Init+0x3a4>)
 8001476:	4694      	mov	ip, r2
 8001478:	4463      	add	r3, ip
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	221c      	movs	r2, #28
 800147e:	4013      	ands	r3, r2
 8001480:	2210      	movs	r2, #16
 8001482:	4252      	negs	r2, r2
 8001484:	409a      	lsls	r2, r3
 8001486:	0011      	movs	r1, r2
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	4a23      	ldr	r2, [pc, #140]	; (8001528 <HAL_ADC_Init+0x3a8>)
 800149c:	4013      	ands	r3, r2
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d10b      	bne.n	80014bc <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	2203      	movs	r2, #3
 80014b0:	4393      	bics	r3, r2
 80014b2:	2201      	movs	r2, #1
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80014ba:	e01c      	b.n	80014f6 <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	2212      	movs	r2, #18
 80014c2:	4393      	bics	r3, r2
 80014c4:	2210      	movs	r2, #16
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	2201      	movs	r2, #1
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 80014d8:	231f      	movs	r3, #31
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80014e0:	e009      	b.n	80014f6 <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	2210      	movs	r2, #16
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80014ee:	231f      	movs	r3, #31
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014f6:	231f      	movs	r3, #31
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	781b      	ldrb	r3, [r3, #0]
}
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	b008      	add	sp, #32
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000000 	.word	0x20000000
 8001508:	00030d40 	.word	0x00030d40
 800150c:	fffffefd 	.word	0xfffffefd
 8001510:	40012708 	.word	0x40012708
 8001514:	ffc3ffff 	.word	0xffc3ffff
 8001518:	fffe0219 	.word	0xfffe0219
 800151c:	dffffc02 	.word	0xdffffc02
 8001520:	07ffff04 	.word	0x07ffff04
 8001524:	3fffffff 	.word	0x3fffffff
 8001528:	833fffe7 	.word	0x833fffe7

0800152c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff fe0f 	bl	800115c <LL_ADC_REG_IsConversionOngoing>
 800153e:	1e03      	subs	r3, r0, #0
 8001540:	d135      	bne.n	80015ae <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2254      	movs	r2, #84	; 0x54
 8001546:	5c9b      	ldrb	r3, [r3, r2]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_ADC_Start+0x24>
 800154c:	2302      	movs	r3, #2
 800154e:	e035      	b.n	80015bc <HAL_ADC_Start+0x90>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2254      	movs	r2, #84	; 0x54
 8001554:	2101      	movs	r1, #1
 8001556:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001558:	250f      	movs	r5, #15
 800155a:	197c      	adds	r4, r7, r5
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	0018      	movs	r0, r3
 8001560:	f000 fa12 	bl	8001988 <ADC_Enable>
 8001564:	0003      	movs	r3, r0
 8001566:	7023      	strb	r3, [r4, #0]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001568:	197b      	adds	r3, r7, r5
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d119      	bne.n	80015a4 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <HAL_ADC_Start+0x98>)
 8001576:	4013      	ands	r3, r2
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	0052      	lsls	r2, r2, #1
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	221c      	movs	r2, #28
 800158e:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2254      	movs	r2, #84	; 0x54
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff fdcb 	bl	8001138 <LL_ADC_REG_StartConversion>
 80015a2:	e008      	b.n	80015b6 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2254      	movs	r2, #84	; 0x54
 80015a8:	2100      	movs	r1, #0
 80015aa:	5499      	strb	r1, [r3, r2]
 80015ac:	e003      	b.n	80015b6 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015ae:	230f      	movs	r3, #15
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	2202      	movs	r2, #2
 80015b4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015b6:	230f      	movs	r3, #15
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	781b      	ldrb	r3, [r3, #0]
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b004      	add	sp, #16
 80015c2:	bdb0      	pop	{r4, r5, r7, pc}
 80015c4:	fffff0fe 	.word	0xfffff0fe

080015c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ea:	2317      	movs	r3, #23
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2254      	movs	r2, #84	; 0x54
 80015fa:	5c9b      	ldrb	r3, [r3, r2]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x24>
 8001600:	2302      	movs	r3, #2
 8001602:	e1bc      	b.n	800197e <HAL_ADC_ConfigChannel+0x39e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2254      	movs	r2, #84	; 0x54
 8001608:	2101      	movs	r1, #1
 800160a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff fda3 	bl	800115c <LL_ADC_REG_IsConversionOngoing>
 8001616:	1e03      	subs	r3, r0, #0
 8001618:	d000      	beq.n	800161c <HAL_ADC_ConfigChannel+0x3c>
 800161a:	e19f      	b.n	800195c <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d100      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x46>
 8001624:	e13e      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691a      	ldr	r2, [r3, #16]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	061b      	lsls	r3, r3, #24
 800162e:	429a      	cmp	r2, r3
 8001630:	d004      	beq.n	800163c <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001636:	4abf      	ldr	r2, [pc, #764]	; (8001934 <HAL_ADC_ConfigChannel+0x354>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d108      	bne.n	800164e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0019      	movs	r1, r3
 8001646:	0010      	movs	r0, r2
 8001648:	f7ff fcea 	bl	8001020 <LL_ADC_REG_SetSequencerChAdd>
 800164c:	e0c9      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	211f      	movs	r1, #31
 8001658:	400b      	ands	r3, r1
 800165a:	210f      	movs	r1, #15
 800165c:	4099      	lsls	r1, r3
 800165e:	000b      	movs	r3, r1
 8001660:	43db      	mvns	r3, r3
 8001662:	4013      	ands	r3, r2
 8001664:	0019      	movs	r1, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	035b      	lsls	r3, r3, #13
 800166c:	0b5b      	lsrs	r3, r3, #13
 800166e:	d105      	bne.n	800167c <HAL_ADC_ConfigChannel+0x9c>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0e9b      	lsrs	r3, r3, #26
 8001676:	221f      	movs	r2, #31
 8001678:	4013      	ands	r3, r2
 800167a:	e098      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2201      	movs	r2, #1
 8001682:	4013      	ands	r3, r2
 8001684:	d000      	beq.n	8001688 <HAL_ADC_ConfigChannel+0xa8>
 8001686:	e091      	b.n	80017ac <HAL_ADC_ConfigChannel+0x1cc>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2202      	movs	r2, #2
 800168e:	4013      	ands	r3, r2
 8001690:	d000      	beq.n	8001694 <HAL_ADC_ConfigChannel+0xb4>
 8001692:	e089      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x1c8>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2204      	movs	r2, #4
 800169a:	4013      	ands	r3, r2
 800169c:	d000      	beq.n	80016a0 <HAL_ADC_ConfigChannel+0xc0>
 800169e:	e081      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x1c4>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2208      	movs	r2, #8
 80016a6:	4013      	ands	r3, r2
 80016a8:	d000      	beq.n	80016ac <HAL_ADC_ConfigChannel+0xcc>
 80016aa:	e079      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x1c0>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2210      	movs	r2, #16
 80016b2:	4013      	ands	r3, r2
 80016b4:	d000      	beq.n	80016b8 <HAL_ADC_ConfigChannel+0xd8>
 80016b6:	e071      	b.n	800179c <HAL_ADC_ConfigChannel+0x1bc>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2220      	movs	r2, #32
 80016be:	4013      	ands	r3, r2
 80016c0:	d000      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0xe4>
 80016c2:	e069      	b.n	8001798 <HAL_ADC_ConfigChannel+0x1b8>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2240      	movs	r2, #64	; 0x40
 80016ca:	4013      	ands	r3, r2
 80016cc:	d000      	beq.n	80016d0 <HAL_ADC_ConfigChannel+0xf0>
 80016ce:	e061      	b.n	8001794 <HAL_ADC_ConfigChannel+0x1b4>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2280      	movs	r2, #128	; 0x80
 80016d6:	4013      	ands	r3, r2
 80016d8:	d000      	beq.n	80016dc <HAL_ADC_ConfigChannel+0xfc>
 80016da:	e059      	b.n	8001790 <HAL_ADC_ConfigChannel+0x1b0>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4013      	ands	r3, r2
 80016e6:	d151      	bne.n	800178c <HAL_ADC_ConfigChannel+0x1ac>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4013      	ands	r3, r2
 80016f2:	d149      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1a8>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4013      	ands	r3, r2
 80016fe:	d141      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1a4>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4013      	ands	r3, r2
 800170a:	d139      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1a0>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	4013      	ands	r3, r2
 8001716:	d131      	bne.n	800177c <HAL_ADC_ConfigChannel+0x19c>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	019b      	lsls	r3, r3, #6
 8001720:	4013      	ands	r3, r2
 8001722:	d129      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x198>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	01db      	lsls	r3, r3, #7
 800172c:	4013      	ands	r3, r2
 800172e:	d121      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x194>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	4013      	ands	r3, r2
 800173a:	d119      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x190>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	025b      	lsls	r3, r3, #9
 8001744:	4013      	ands	r3, r2
 8001746:	d111      	bne.n	800176c <HAL_ADC_ConfigChannel+0x18c>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	029b      	lsls	r3, r3, #10
 8001750:	4013      	ands	r3, r2
 8001752:	d109      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x188>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	02db      	lsls	r3, r3, #11
 800175c:	4013      	ands	r3, r2
 800175e:	d001      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x184>
 8001760:	2312      	movs	r3, #18
 8001762:	e024      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 8001764:	2300      	movs	r3, #0
 8001766:	e022      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 8001768:	2311      	movs	r3, #17
 800176a:	e020      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 800176c:	2310      	movs	r3, #16
 800176e:	e01e      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 8001770:	230f      	movs	r3, #15
 8001772:	e01c      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 8001774:	230e      	movs	r3, #14
 8001776:	e01a      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 8001778:	230d      	movs	r3, #13
 800177a:	e018      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 800177c:	230c      	movs	r3, #12
 800177e:	e016      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 8001780:	230b      	movs	r3, #11
 8001782:	e014      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 8001784:	230a      	movs	r3, #10
 8001786:	e012      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 8001788:	2309      	movs	r3, #9
 800178a:	e010      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 800178c:	2308      	movs	r3, #8
 800178e:	e00e      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 8001790:	2307      	movs	r3, #7
 8001792:	e00c      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 8001794:	2306      	movs	r3, #6
 8001796:	e00a      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 8001798:	2305      	movs	r3, #5
 800179a:	e008      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 800179c:	2304      	movs	r3, #4
 800179e:	e006      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 80017a0:	2303      	movs	r3, #3
 80017a2:	e004      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e002      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1ce>
 80017ac:	2300      	movs	r3, #0
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	6852      	ldr	r2, [r2, #4]
 80017b2:	201f      	movs	r0, #31
 80017b4:	4002      	ands	r2, r0
 80017b6:	4093      	lsls	r3, r2
 80017b8:	000a      	movs	r2, r1
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d808      	bhi.n	80017e2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	001a      	movs	r2, r3
 80017de:	f7ff fbff 	bl	8000fe0 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	6819      	ldr	r1, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	001a      	movs	r2, r3
 80017f0:	f7ff fc3a 	bl	8001068 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db00      	blt.n	80017fe <HAL_ADC_ConfigChannel+0x21e>
 80017fc:	e0b8      	b.n	8001970 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017fe:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <HAL_ADC_ConfigChannel+0x358>)
 8001800:	0018      	movs	r0, r3
 8001802:	f7ff fbc3 	bl	8000f8c <LL_ADC_GetCommonPathInternalCh>
 8001806:	0003      	movs	r3, r0
 8001808:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a4b      	ldr	r2, [pc, #300]	; (800193c <HAL_ADC_ConfigChannel+0x35c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d11d      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x270>
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	4013      	ands	r3, r2
 800181c:	d118      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	0412      	lsls	r2, r2, #16
 8001824:	4313      	orrs	r3, r2
 8001826:	4a44      	ldr	r2, [pc, #272]	; (8001938 <HAL_ADC_ConfigChannel+0x358>)
 8001828:	0019      	movs	r1, r3
 800182a:	0010      	movs	r0, r2
 800182c:	f7ff fb9a 	bl	8000f64 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001830:	4b43      	ldr	r3, [pc, #268]	; (8001940 <HAL_ADC_ConfigChannel+0x360>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4943      	ldr	r1, [pc, #268]	; (8001944 <HAL_ADC_ConfigChannel+0x364>)
 8001836:	0018      	movs	r0, r3
 8001838:	f7fe fc64 	bl	8000104 <__udivsi3>
 800183c:	0003      	movs	r3, r0
 800183e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001840:	e002      	b.n	8001848 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3b01      	subs	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f9      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800184e:	e08f      	b.n	8001970 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a3c      	ldr	r2, [pc, #240]	; (8001948 <HAL_ADC_ConfigChannel+0x368>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10e      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x298>
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	045b      	lsls	r3, r3, #17
 8001860:	4013      	ands	r3, r2
 8001862:	d109      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	0452      	lsls	r2, r2, #17
 800186a:	4313      	orrs	r3, r2
 800186c:	4a32      	ldr	r2, [pc, #200]	; (8001938 <HAL_ADC_ConfigChannel+0x358>)
 800186e:	0019      	movs	r1, r3
 8001870:	0010      	movs	r0, r2
 8001872:	f7ff fb77 	bl	8000f64 <LL_ADC_SetCommonPathInternalCh>
 8001876:	e07b      	b.n	8001970 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a33      	ldr	r2, [pc, #204]	; (800194c <HAL_ADC_ConfigChannel+0x36c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d000      	beq.n	8001884 <HAL_ADC_ConfigChannel+0x2a4>
 8001882:	e075      	b.n	8001970 <HAL_ADC_ConfigChannel+0x390>
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	03db      	lsls	r3, r3, #15
 800188a:	4013      	ands	r3, r2
 800188c:	d000      	beq.n	8001890 <HAL_ADC_ConfigChannel+0x2b0>
 800188e:	e06f      	b.n	8001970 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	03d2      	lsls	r2, r2, #15
 8001896:	4313      	orrs	r3, r2
 8001898:	4a27      	ldr	r2, [pc, #156]	; (8001938 <HAL_ADC_ConfigChannel+0x358>)
 800189a:	0019      	movs	r1, r3
 800189c:	0010      	movs	r0, r2
 800189e:	f7ff fb61 	bl	8000f64 <LL_ADC_SetCommonPathInternalCh>
 80018a2:	e065      	b.n	8001970 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	061b      	lsls	r3, r3, #24
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d004      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80018b4:	4a1f      	ldr	r2, [pc, #124]	; (8001934 <HAL_ADC_ConfigChannel+0x354>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d107      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0019      	movs	r1, r3
 80018c4:	0010      	movs	r0, r2
 80018c6:	f7ff fbbc 	bl	8001042 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da4e      	bge.n	8001970 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_ADC_ConfigChannel+0x358>)
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff fb59 	bl	8000f8c <LL_ADC_GetCommonPathInternalCh>
 80018da:	0003      	movs	r3, r0
 80018dc:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_ADC_ConfigChannel+0x35c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d108      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_ADC_ConfigChannel+0x370>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <HAL_ADC_ConfigChannel+0x358>)
 80018f0:	0019      	movs	r1, r3
 80018f2:	0010      	movs	r0, r2
 80018f4:	f7ff fb36 	bl	8000f64 <LL_ADC_SetCommonPathInternalCh>
 80018f8:	e03a      	b.n	8001970 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <HAL_ADC_ConfigChannel+0x368>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d108      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4a13      	ldr	r2, [pc, #76]	; (8001954 <HAL_ADC_ConfigChannel+0x374>)
 8001908:	4013      	ands	r3, r2
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <HAL_ADC_ConfigChannel+0x358>)
 800190c:	0019      	movs	r1, r3
 800190e:	0010      	movs	r0, r2
 8001910:	f7ff fb28 	bl	8000f64 <LL_ADC_SetCommonPathInternalCh>
 8001914:	e02c      	b.n	8001970 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a0c      	ldr	r2, [pc, #48]	; (800194c <HAL_ADC_ConfigChannel+0x36c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d127      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <HAL_ADC_ConfigChannel+0x378>)
 8001924:	4013      	ands	r3, r2
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_ADC_ConfigChannel+0x358>)
 8001928:	0019      	movs	r1, r3
 800192a:	0010      	movs	r0, r2
 800192c:	f7ff fb1a 	bl	8000f64 <LL_ADC_SetCommonPathInternalCh>
 8001930:	e01e      	b.n	8001970 <HAL_ADC_ConfigChannel+0x390>
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	80000004 	.word	0x80000004
 8001938:	40012708 	.word	0x40012708
 800193c:	b0001000 	.word	0xb0001000
 8001940:	20000000 	.word	0x20000000
 8001944:	00030d40 	.word	0x00030d40
 8001948:	b8004000 	.word	0xb8004000
 800194c:	b4002000 	.word	0xb4002000
 8001950:	ff7fffff 	.word	0xff7fffff
 8001954:	feffffff 	.word	0xfeffffff
 8001958:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	2220      	movs	r2, #32
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001968:	2317      	movs	r3, #23
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2254      	movs	r2, #84	; 0x54
 8001974:	2100      	movs	r1, #0
 8001976:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001978:	2317      	movs	r3, #23
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	781b      	ldrb	r3, [r3, #0]
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b006      	add	sp, #24
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)

08001988 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff fbbd 	bl	8001114 <LL_ADC_IsEnabled>
 800199a:	1e03      	subs	r3, r0, #0
 800199c:	d149      	bne.n	8001a32 <ADC_Enable+0xaa>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <ADC_Enable+0xb4>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	d00d      	beq.n	80019c6 <ADC_Enable+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	2210      	movs	r2, #16
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	2201      	movs	r2, #1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e036      	b.n	8001a34 <ADC_Enable+0xac>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff fb90 	bl	80010f0 <LL_ADC_Enable>
    
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7e5b      	ldrb	r3, [r3, #25]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d02c      	beq.n	8001a32 <ADC_Enable+0xaa>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80019d8:	f7ff faba 	bl	8000f50 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019e0:	e020      	b.n	8001a24 <ADC_Enable+0x9c>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7ff fb94 	bl	8001114 <LL_ADC_IsEnabled>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d104      	bne.n	80019fa <ADC_Enable+0x72>
        {
          LL_ADC_Enable(hadc->Instance);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff fb7b 	bl	80010f0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019fa:	f7ff faa9 	bl	8000f50 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d90d      	bls.n	8001a24 <ADC_Enable+0x9c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	2201      	movs	r2, #1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	65da      	str	r2, [r3, #92]	; 0x5c
          
          return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e007      	b.n	8001a34 <ADC_Enable+0xac>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d1d7      	bne.n	80019e2 <ADC_Enable+0x5a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b004      	add	sp, #16
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	80000017 	.word	0x80000017

08001a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	0002      	movs	r2, r0
 8001a48:	1dfb      	adds	r3, r7, #7
 8001a4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	1dfb      	adds	r3, r7, #7
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b7f      	cmp	r3, #127	; 0x7f
 8001a52:	d809      	bhi.n	8001a68 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	001a      	movs	r2, r3
 8001a5a:	231f      	movs	r3, #31
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__NVIC_EnableIRQ+0x30>)
 8001a60:	2101      	movs	r1, #1
 8001a62:	4091      	lsls	r1, r2
 8001a64:	000a      	movs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
  }
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b7f      	cmp	r3, #127	; 0x7f
 8001a88:	d828      	bhi.n	8001adc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	; (8001b48 <__NVIC_SetPriority+0xd4>)
 8001a8c:	1dfb      	adds	r3, r7, #7
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	33c0      	adds	r3, #192	; 0xc0
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	589b      	ldr	r3, [r3, r2]
 8001a9a:	1dfa      	adds	r2, r7, #7
 8001a9c:	7812      	ldrb	r2, [r2, #0]
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	00d2      	lsls	r2, r2, #3
 8001aa6:	21ff      	movs	r1, #255	; 0xff
 8001aa8:	4091      	lsls	r1, r2
 8001aaa:	000a      	movs	r2, r1
 8001aac:	43d2      	mvns	r2, r2
 8001aae:	401a      	ands	r2, r3
 8001ab0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	019b      	lsls	r3, r3, #6
 8001ab6:	22ff      	movs	r2, #255	; 0xff
 8001ab8:	401a      	ands	r2, r3
 8001aba:	1dfb      	adds	r3, r7, #7
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	4003      	ands	r3, r0
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ac8:	481f      	ldr	r0, [pc, #124]	; (8001b48 <__NVIC_SetPriority+0xd4>)
 8001aca:	1dfb      	adds	r3, r7, #7
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	33c0      	adds	r3, #192	; 0xc0
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ada:	e031      	b.n	8001b40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001adc:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <__NVIC_SetPriority+0xd8>)
 8001ade:	1dfb      	adds	r3, r7, #7
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	400b      	ands	r3, r1
 8001ae8:	3b08      	subs	r3, #8
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3306      	adds	r3, #6
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	18d3      	adds	r3, r2, r3
 8001af2:	3304      	adds	r3, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	1dfa      	adds	r2, r7, #7
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	0011      	movs	r1, r2
 8001afc:	2203      	movs	r2, #3
 8001afe:	400a      	ands	r2, r1
 8001b00:	00d2      	lsls	r2, r2, #3
 8001b02:	21ff      	movs	r1, #255	; 0xff
 8001b04:	4091      	lsls	r1, r2
 8001b06:	000a      	movs	r2, r1
 8001b08:	43d2      	mvns	r2, r2
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	22ff      	movs	r2, #255	; 0xff
 8001b14:	401a      	ands	r2, r3
 8001b16:	1dfb      	adds	r3, r7, #7
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	4003      	ands	r3, r0
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <__NVIC_SetPriority+0xd8>)
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	001c      	movs	r4, r3
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4023      	ands	r3, r4
 8001b30:	3b08      	subs	r3, #8
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	430a      	orrs	r2, r1
 8001b36:	3306      	adds	r3, #6
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	18c3      	adds	r3, r0, r3
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	601a      	str	r2, [r3, #0]
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b003      	add	sp, #12
 8001b46:	bd90      	pop	{r4, r7, pc}
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <SysTick_Config+0x40>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e010      	b.n	8001b88 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <SysTick_Config+0x44>)
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	3a01      	subs	r2, #1
 8001b6c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	425b      	negs	r3, r3
 8001b72:	2103      	movs	r1, #3
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff ff7d 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SysTick_Config+0x44>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <SysTick_Config+0x44>)
 8001b82:	2207      	movs	r2, #7
 8001b84:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	00ffffff 	.word	0x00ffffff
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	1c02      	adds	r2, r0, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff ff5d 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b004      	add	sp, #16
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	0002      	movs	r2, r0
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff ff33 	bl	8001a40 <__NVIC_EnableIRQ>
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b002      	add	sp, #8
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff ffaf 	bl	8001b50 <SysTick_Config>
 8001bf2:	0003      	movs	r3, r0
}
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b002      	add	sp, #8
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	e147      	b.n	8001e9c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4091      	lsls	r1, r2
 8001c16:	000a      	movs	r2, r1
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d100      	bne.n	8001c24 <HAL_GPIO_Init+0x28>
 8001c22:	e138      	b.n	8001e96 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x38>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b12      	cmp	r3, #18
 8001c32:	d123      	bne.n	8001c7c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	0092      	lsls	r2, r2, #2
 8001c3e:	58d3      	ldr	r3, [r2, r3]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2207      	movs	r2, #7
 8001c46:	4013      	ands	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	0013      	movs	r3, r2
 8001c50:	43da      	mvns	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2107      	movs	r1, #7
 8001c60:	400b      	ands	r3, r1
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	409a      	lsls	r2, r3
 8001c66:	0013      	movs	r3, r2
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	6939      	ldr	r1, [r7, #16]
 8001c7a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	0013      	movs	r3, r2
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	0013      	movs	r3, r2
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_GPIO_Init+0xd4>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc4:	2b11      	cmp	r3, #17
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b12      	cmp	r3, #18
 8001cce:	d130      	bne.n	8001d32 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	0013      	movs	r3, r2
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d06:	2201      	movs	r2, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	0013      	movs	r3, r2
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
 8001d24:	0013      	movs	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	0013      	movs	r3, r2
 8001d42:	43da      	mvns	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	409a      	lsls	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	055b      	lsls	r3, r3, #21
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d100      	bne.n	8001d70 <HAL_GPIO_Init+0x174>
 8001d6e:	e092      	b.n	8001e96 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001d70:	4a50      	ldr	r2, [pc, #320]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3318      	adds	r3, #24
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	589b      	ldr	r3, [r3, r2]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2203      	movs	r2, #3
 8001d82:	4013      	ands	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	220f      	movs	r2, #15
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	0013      	movs	r3, r2
 8001d8c:	43da      	mvns	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	23a0      	movs	r3, #160	; 0xa0
 8001d98:	05db      	lsls	r3, r3, #23
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d013      	beq.n	8001dc6 <HAL_GPIO_Init+0x1ca>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a45      	ldr	r2, [pc, #276]	; (8001eb8 <HAL_GPIO_Init+0x2bc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00d      	beq.n	8001dc2 <HAL_GPIO_Init+0x1c6>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a44      	ldr	r2, [pc, #272]	; (8001ebc <HAL_GPIO_Init+0x2c0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <HAL_GPIO_Init+0x1c2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a43      	ldr	r2, [pc, #268]	; (8001ec0 <HAL_GPIO_Init+0x2c4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_GPIO_Init+0x1be>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x1cc>
 8001dba:	2305      	movs	r3, #5
 8001dbc:	e004      	b.n	8001dc8 <HAL_GPIO_Init+0x1cc>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e002      	b.n	8001dc8 <HAL_GPIO_Init+0x1cc>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_GPIO_Init+0x1cc>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	2103      	movs	r1, #3
 8001dcc:	400a      	ands	r2, r1
 8001dce:	00d2      	lsls	r2, r2, #3
 8001dd0:	4093      	lsls	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001dd8:	4936      	ldr	r1, [pc, #216]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3318      	adds	r3, #24
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001de6:	4a33      	ldr	r2, [pc, #204]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	58d3      	ldr	r3, [r2, r3]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	43da      	mvns	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	025b      	lsls	r3, r3, #9
 8001e00:	4013      	ands	r3, r2
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e0c:	4929      	ldr	r1, [pc, #164]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001e14:	4a27      	ldr	r2, [pc, #156]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001e16:	2384      	movs	r3, #132	; 0x84
 8001e18:	58d3      	ldr	r3, [r2, r3]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	029b      	lsls	r3, r3, #10
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e3a:	491e      	ldr	r1, [pc, #120]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001e3c:	2284      	movs	r2, #132	; 0x84
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	035b      	lsls	r3, r3, #13
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43da      	mvns	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	039b      	lsls	r3, r3, #14
 8001e84:	4013      	ands	r3, r2
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	40da      	lsrs	r2, r3
 8001ea4:	1e13      	subs	r3, r2, #0
 8001ea6:	d000      	beq.n	8001eaa <HAL_GPIO_Init+0x2ae>
 8001ea8:	e6b0      	b.n	8001c0c <HAL_GPIO_Init+0x10>
  }
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b006      	add	sp, #24
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40021800 	.word	0x40021800
 8001eb8:	50000400 	.word	0x50000400
 8001ebc:	50000800 	.word	0x50000800
 8001ec0:	50000c00 	.word	0x50000c00

08001ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d11f      	bne.n	8001f28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	0013      	movs	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	189b      	adds	r3, r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4912      	ldr	r1, [pc, #72]	; (8001f40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f7fe f904 	bl	8000104 <__udivsi3>
 8001efc:	0003      	movs	r3, r0
 8001efe:	3301      	adds	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f02:	e008      	b.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e001      	b.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e009      	b.n	8001f2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d0ed      	beq.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	40007000 	.word	0x40007000
 8001f38:	fffff9ff 	.word	0xfffff9ff
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	000f4240 	.word	0x000f4240

08001f44 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	23e0      	movs	r3, #224	; 0xe0
 8001f4e:	01db      	lsls	r3, r3, #7
 8001f50:	4013      	ands	r3, r2
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e304      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2201      	movs	r2, #1
 8001f74:	4013      	ands	r3, r2
 8001f76:	d100      	bne.n	8001f7a <HAL_RCC_OscConfig+0x1e>
 8001f78:	e07c      	b.n	8002074 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7a:	4bc3      	ldr	r3, [pc, #780]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2238      	movs	r2, #56	; 0x38
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f84:	4bc0      	ldr	r3, [pc, #768]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d102      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3e>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d002      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x44>
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	4bb9      	ldr	r3, [pc, #740]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	029b      	lsls	r3, r3, #10
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d062      	beq.n	8002072 <HAL_RCC_OscConfig+0x116>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d15e      	bne.n	8002072 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e2df      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x78>
 8001fc4:	4bb0      	ldr	r3, [pc, #704]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4baf      	ldr	r3, [pc, #700]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	0249      	lsls	r1, r1, #9
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e020      	b.n	8002016 <HAL_RCC_OscConfig+0xba>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	23a0      	movs	r3, #160	; 0xa0
 8001fda:	02db      	lsls	r3, r3, #11
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d10e      	bne.n	8001ffe <HAL_RCC_OscConfig+0xa2>
 8001fe0:	4ba9      	ldr	r3, [pc, #676]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4ba8      	ldr	r3, [pc, #672]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	2180      	movs	r1, #128	; 0x80
 8001fe8:	02c9      	lsls	r1, r1, #11
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	4ba6      	ldr	r3, [pc, #664]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4ba5      	ldr	r3, [pc, #660]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	0249      	lsls	r1, r1, #9
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e00b      	b.n	8002016 <HAL_RCC_OscConfig+0xba>
 8001ffe:	4ba2      	ldr	r3, [pc, #648]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4ba1      	ldr	r3, [pc, #644]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002004:	49a1      	ldr	r1, [pc, #644]	; (800228c <HAL_RCC_OscConfig+0x330>)
 8002006:	400a      	ands	r2, r1
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	4b9f      	ldr	r3, [pc, #636]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b9e      	ldr	r3, [pc, #632]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002010:	499f      	ldr	r1, [pc, #636]	; (8002290 <HAL_RCC_OscConfig+0x334>)
 8002012:	400a      	ands	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d014      	beq.n	8002048 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7fe ff97 	bl	8000f50 <HAL_GetTick>
 8002022:	0003      	movs	r3, r0
 8002024:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002028:	f7fe ff92 	bl	8000f50 <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e29e      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203a:	4b93      	ldr	r3, [pc, #588]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	029b      	lsls	r3, r3, #10
 8002042:	4013      	ands	r3, r2
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0xcc>
 8002046:	e015      	b.n	8002074 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7fe ff82 	bl	8000f50 <HAL_GetTick>
 800204c:	0003      	movs	r3, r0
 800204e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002052:	f7fe ff7d 	bl	8000f50 <HAL_GetTick>
 8002056:	0002      	movs	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b64      	cmp	r3, #100	; 0x64
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e289      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002064:	4b88      	ldr	r3, [pc, #544]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	029b      	lsls	r3, r3, #10
 800206c:	4013      	ands	r3, r2
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0xf6>
 8002070:	e000      	b.n	8002074 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002072:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2202      	movs	r2, #2
 800207a:	4013      	ands	r3, r2
 800207c:	d100      	bne.n	8002080 <HAL_RCC_OscConfig+0x124>
 800207e:	e099      	b.n	80021b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002080:	4b81      	ldr	r3, [pc, #516]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2238      	movs	r2, #56	; 0x38
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800208a:	4b7f      	ldr	r3, [pc, #508]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2203      	movs	r2, #3
 8002090:	4013      	ands	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b10      	cmp	r3, #16
 8002098:	d102      	bne.n	80020a0 <HAL_RCC_OscConfig+0x144>
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d002      	beq.n	80020a6 <HAL_RCC_OscConfig+0x14a>
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d135      	bne.n	8002112 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a6:	4b78      	ldr	r3, [pc, #480]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4013      	ands	r3, r2
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x162>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e25c      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	4b72      	ldr	r3, [pc, #456]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4a74      	ldr	r2, [pc, #464]	; (8002294 <HAL_RCC_OscConfig+0x338>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	021a      	lsls	r2, r3, #8
 80020ce:	4b6e      	ldr	r3, [pc, #440]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d112      	bne.n	8002100 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020da:	4b6b      	ldr	r3, [pc, #428]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x33c>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	4b67      	ldr	r3, [pc, #412]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80020ee:	4b66      	ldr	r3, [pc, #408]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	0adb      	lsrs	r3, r3, #11
 80020f4:	2207      	movs	r2, #7
 80020f6:	4013      	ands	r3, r2
 80020f8:	4a68      	ldr	r2, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x340>)
 80020fa:	40da      	lsrs	r2, r3
 80020fc:	4b68      	ldr	r3, [pc, #416]	; (80022a0 <HAL_RCC_OscConfig+0x344>)
 80020fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002100:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <HAL_RCC_OscConfig+0x348>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0018      	movs	r0, r3
 8002106:	f7fe fec9 	bl	8000e9c <HAL_InitTick>
 800210a:	1e03      	subs	r3, r0, #0
 800210c:	d051      	beq.n	80021b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e232      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d030      	beq.n	800217c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800211a:	4b5b      	ldr	r3, [pc, #364]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a5e      	ldr	r2, [pc, #376]	; (8002298 <HAL_RCC_OscConfig+0x33c>)
 8002120:	4013      	ands	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	4b57      	ldr	r3, [pc, #348]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800212e:	4b56      	ldr	r3, [pc, #344]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4b55      	ldr	r3, [pc, #340]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	0049      	lsls	r1, r1, #1
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe ff08 	bl	8000f50 <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002146:	f7fe ff03 	bl	8000f50 <HAL_GetTick>
 800214a:	0002      	movs	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e20f      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002158:	4b4b      	ldr	r3, [pc, #300]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4013      	ands	r3, r2
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002164:	4b48      	ldr	r3, [pc, #288]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a4a      	ldr	r2, [pc, #296]	; (8002294 <HAL_RCC_OscConfig+0x338>)
 800216a:	4013      	ands	r3, r2
 800216c:	0019      	movs	r1, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	021a      	lsls	r2, r3, #8
 8002174:	4b44      	ldr	r3, [pc, #272]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	e01b      	b.n	80021b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800217c:	4b42      	ldr	r3, [pc, #264]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b41      	ldr	r3, [pc, #260]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002182:	4949      	ldr	r1, [pc, #292]	; (80022a8 <HAL_RCC_OscConfig+0x34c>)
 8002184:	400a      	ands	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fee2 	bl	8000f50 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7fe fedd 	bl	8000f50 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1e9      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a4:	4b38      	ldr	r3, [pc, #224]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4013      	ands	r3, r2
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x236>
 80021b0:	e000      	b.n	80021b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2208      	movs	r2, #8
 80021ba:	4013      	ands	r3, r2
 80021bc:	d047      	beq.n	800224e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80021be:	4b32      	ldr	r3, [pc, #200]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2238      	movs	r2, #56	; 0x38
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b18      	cmp	r3, #24
 80021c8:	d10a      	bne.n	80021e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80021ca:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 80021cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ce:	2202      	movs	r2, #2
 80021d0:	4013      	ands	r3, r2
 80021d2:	d03c      	beq.n	800224e <HAL_RCC_OscConfig+0x2f2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d138      	bne.n	800224e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e1cb      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d019      	beq.n	800221c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80021e8:	4b27      	ldr	r3, [pc, #156]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021ec:	4b26      	ldr	r3, [pc, #152]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 80021ee:	2101      	movs	r1, #1
 80021f0:	430a      	orrs	r2, r1
 80021f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe feac 	bl	8000f50 <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fe:	f7fe fea7 	bl	8000f50 <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e1b3      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002214:	2202      	movs	r2, #2
 8002216:	4013      	ands	r3, r2
 8002218:	d0f1      	beq.n	80021fe <HAL_RCC_OscConfig+0x2a2>
 800221a:	e018      	b.n	800224e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800221c:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 800221e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002222:	2101      	movs	r1, #1
 8002224:	438a      	bics	r2, r1
 8002226:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe fe92 	bl	8000f50 <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7fe fe8d 	bl	8000f50 <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e199      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	2202      	movs	r2, #2
 800224a:	4013      	ands	r3, r2
 800224c:	d1f1      	bne.n	8002232 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2204      	movs	r2, #4
 8002254:	4013      	ands	r3, r2
 8002256:	d100      	bne.n	800225a <HAL_RCC_OscConfig+0x2fe>
 8002258:	e0c6      	b.n	80023e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	231f      	movs	r3, #31
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2238      	movs	r2, #56	; 0x38
 8002268:	4013      	ands	r3, r2
 800226a:	2b20      	cmp	r3, #32
 800226c:	d11e      	bne.n	80022ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_OscConfig+0x32c>)
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2202      	movs	r2, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d100      	bne.n	800227a <HAL_RCC_OscConfig+0x31e>
 8002278:	e0b6      	b.n	80023e8 <HAL_RCC_OscConfig+0x48c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d000      	beq.n	8002284 <HAL_RCC_OscConfig+0x328>
 8002282:	e0b1      	b.n	80023e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e177      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
 8002288:	40021000 	.word	0x40021000
 800228c:	fffeffff 	.word	0xfffeffff
 8002290:	fffbffff 	.word	0xfffbffff
 8002294:	ffff80ff 	.word	0xffff80ff
 8002298:	ffffc7ff 	.word	0xffffc7ff
 800229c:	00f42400 	.word	0x00f42400
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000004 	.word	0x20000004
 80022a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022ac:	4bb4      	ldr	r3, [pc, #720]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80022ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	055b      	lsls	r3, r3, #21
 80022b4:	4013      	ands	r3, r2
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_OscConfig+0x360>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x362>
 80022bc:	2300      	movs	r3, #0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d011      	beq.n	80022e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	4baf      	ldr	r3, [pc, #700]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80022c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022c6:	4bae      	ldr	r3, [pc, #696]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0549      	lsls	r1, r1, #21
 80022cc:	430a      	orrs	r2, r1
 80022ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80022d0:	4bab      	ldr	r3, [pc, #684]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80022d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	055b      	lsls	r3, r3, #21
 80022d8:	4013      	ands	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80022de:	231f      	movs	r3, #31
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e6:	4ba7      	ldr	r3, [pc, #668]	; (8002584 <HAL_RCC_OscConfig+0x628>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4013      	ands	r3, r2
 80022f0:	d11a      	bne.n	8002328 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f2:	4ba4      	ldr	r3, [pc, #656]	; (8002584 <HAL_RCC_OscConfig+0x628>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4ba3      	ldr	r3, [pc, #652]	; (8002584 <HAL_RCC_OscConfig+0x628>)
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	0049      	lsls	r1, r1, #1
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002300:	f7fe fe26 	bl	8000f50 <HAL_GetTick>
 8002304:	0003      	movs	r3, r0
 8002306:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe fe21 	bl	8000f50 <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e12d      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231c:	4b99      	ldr	r3, [pc, #612]	; (8002584 <HAL_RCC_OscConfig+0x628>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4013      	ands	r3, r2
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x3e2>
 8002330:	4b93      	ldr	r3, [pc, #588]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002332:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002334:	4b92      	ldr	r3, [pc, #584]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002336:	2101      	movs	r1, #1
 8002338:	430a      	orrs	r2, r1
 800233a:	65da      	str	r2, [r3, #92]	; 0x5c
 800233c:	e01c      	b.n	8002378 <HAL_RCC_OscConfig+0x41c>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b05      	cmp	r3, #5
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x404>
 8002346:	4b8e      	ldr	r3, [pc, #568]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002348:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800234a:	4b8d      	ldr	r3, [pc, #564]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 800234c:	2104      	movs	r1, #4
 800234e:	430a      	orrs	r2, r1
 8002350:	65da      	str	r2, [r3, #92]	; 0x5c
 8002352:	4b8b      	ldr	r3, [pc, #556]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002354:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002356:	4b8a      	ldr	r3, [pc, #552]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002358:	2101      	movs	r1, #1
 800235a:	430a      	orrs	r2, r1
 800235c:	65da      	str	r2, [r3, #92]	; 0x5c
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0x41c>
 8002360:	4b87      	ldr	r3, [pc, #540]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002362:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002364:	4b86      	ldr	r3, [pc, #536]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002366:	2101      	movs	r1, #1
 8002368:	438a      	bics	r2, r1
 800236a:	65da      	str	r2, [r3, #92]	; 0x5c
 800236c:	4b84      	ldr	r3, [pc, #528]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 800236e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002370:	4b83      	ldr	r3, [pc, #524]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002372:	2104      	movs	r1, #4
 8002374:	438a      	bics	r2, r1
 8002376:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d014      	beq.n	80023aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe fde6 	bl	8000f50 <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002388:	e009      	b.n	800239e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe fde1 	bl	8000f50 <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	4a7c      	ldr	r2, [pc, #496]	; (8002588 <HAL_RCC_OscConfig+0x62c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e0ec      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239e:	4b78      	ldr	r3, [pc, #480]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x42e>
 80023a8:	e013      	b.n	80023d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe fdd1 	bl	8000f50 <HAL_GetTick>
 80023ae:	0003      	movs	r3, r0
 80023b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b2:	e009      	b.n	80023c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f7fe fdcc 	bl	8000f50 <HAL_GetTick>
 80023b8:	0002      	movs	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	4a72      	ldr	r2, [pc, #456]	; (8002588 <HAL_RCC_OscConfig+0x62c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0d7      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c8:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80023d2:	231f      	movs	r3, #31
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80023dc:	4b68      	ldr	r3, [pc, #416]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80023de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023e0:	4b67      	ldr	r3, [pc, #412]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80023e2:	496a      	ldr	r1, [pc, #424]	; (800258c <HAL_RCC_OscConfig+0x630>)
 80023e4:	400a      	ands	r2, r1
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d100      	bne.n	80023f2 <HAL_RCC_OscConfig+0x496>
 80023f0:	e0c1      	b.n	8002576 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f2:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2238      	movs	r2, #56	; 0x38
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d100      	bne.n	8002400 <HAL_RCC_OscConfig+0x4a4>
 80023fe:	e081      	b.n	8002504 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d156      	bne.n	80024b6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002408:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b5c      	ldr	r3, [pc, #368]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 800240e:	4960      	ldr	r1, [pc, #384]	; (8002590 <HAL_RCC_OscConfig+0x634>)
 8002410:	400a      	ands	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fd9c 	bl	8000f50 <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fd97 	bl	8000f50 <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0a3      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002430:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	049b      	lsls	r3, r3, #18
 8002438:	4013      	ands	r3, r2
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a54      	ldr	r2, [pc, #336]	; (8002594 <HAL_RCC_OscConfig+0x638>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1a      	ldr	r2, [r3, #32]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002468:	431a      	orrs	r2, r3
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002470:	4b43      	ldr	r3, [pc, #268]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b42      	ldr	r3, [pc, #264]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002476:	2180      	movs	r1, #128	; 0x80
 8002478:	0449      	lsls	r1, r1, #17
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800247e:	4b40      	ldr	r3, [pc, #256]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	0549      	lsls	r1, r1, #21
 8002488:	430a      	orrs	r2, r1
 800248a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fd60 	bl	8000f50 <HAL_GetTick>
 8002490:	0003      	movs	r3, r0
 8002492:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7fe fd5b 	bl	8000f50 <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e067      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a8:	4b35      	ldr	r3, [pc, #212]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	049b      	lsls	r3, r3, #18
 80024b0:	4013      	ands	r3, r2
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x53a>
 80024b4:	e05f      	b.n	8002576 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b32      	ldr	r3, [pc, #200]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80024bc:	4934      	ldr	r1, [pc, #208]	; (8002590 <HAL_RCC_OscConfig+0x634>)
 80024be:	400a      	ands	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80024c2:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80024c8:	2103      	movs	r1, #3
 80024ca:	438a      	bics	r2, r1
 80024cc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80024d4:	4930      	ldr	r1, [pc, #192]	; (8002598 <HAL_RCC_OscConfig+0x63c>)
 80024d6:	400a      	ands	r2, r1
 80024d8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7fe fd39 	bl	8000f50 <HAL_GetTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fd34 	bl	8000f50 <HAL_GetTick>
 80024e8:	0002      	movs	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e040      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	049b      	lsls	r3, r3, #18
 80024fe:	4013      	ands	r3, r2
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x588>
 8002502:	e038      	b.n	8002576 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e033      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x624>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2203      	movs	r2, #3
 800251a:	401a      	ands	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	429a      	cmp	r2, r3
 8002522:	d126      	bne.n	8002572 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2270      	movs	r2, #112	; 0x70
 8002528:	401a      	ands	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d11f      	bne.n	8002572 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	23fe      	movs	r3, #254	; 0xfe
 8002536:	01db      	lsls	r3, r3, #7
 8002538:	401a      	ands	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d116      	bne.n	8002572 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	23f8      	movs	r3, #248	; 0xf8
 8002548:	039b      	lsls	r3, r3, #14
 800254a:	401a      	ands	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d10e      	bne.n	8002572 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	23e0      	movs	r3, #224	; 0xe0
 8002558:	051b      	lsls	r3, r3, #20
 800255a:	401a      	ands	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	0f5b      	lsrs	r3, r3, #29
 8002568:	075a      	lsls	r2, r3, #29
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b008      	add	sp, #32
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	40007000 	.word	0x40007000
 8002588:	00001388 	.word	0x00001388
 800258c:	efffffff 	.word	0xefffffff
 8002590:	feffffff 	.word	0xfeffffff
 8002594:	11c1808c 	.word	0x11c1808c
 8002598:	eefeffff 	.word	0xeefeffff

0800259c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0e9      	b.n	8002784 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_ClockConfig+0x1f0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2207      	movs	r2, #7
 80025b6:	4013      	ands	r3, r2
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d91e      	bls.n	80025fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b73      	ldr	r3, [pc, #460]	; (800278c <HAL_RCC_ClockConfig+0x1f0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2207      	movs	r2, #7
 80025c4:	4393      	bics	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	4b70      	ldr	r3, [pc, #448]	; (800278c <HAL_RCC_ClockConfig+0x1f0>)
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025d0:	f7fe fcbe 	bl	8000f50 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025d8:	e009      	b.n	80025ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025da:	f7fe fcb9 	bl	8000f50 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	4a6a      	ldr	r2, [pc, #424]	; (8002790 <HAL_RCC_ClockConfig+0x1f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0ca      	b.n	8002784 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025ee:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_RCC_ClockConfig+0x1f0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2207      	movs	r2, #7
 80025f4:	4013      	ands	r3, r2
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d1ee      	bne.n	80025da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	d015      	beq.n	8002632 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2204      	movs	r2, #4
 800260c:	4013      	ands	r3, r2
 800260e:	d006      	beq.n	800261e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002610:	4b60      	ldr	r3, [pc, #384]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	4b5f      	ldr	r3, [pc, #380]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 8002616:	21e0      	movs	r1, #224	; 0xe0
 8002618:	01c9      	lsls	r1, r1, #7
 800261a:	430a      	orrs	r2, r1
 800261c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261e:	4b5d      	ldr	r3, [pc, #372]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	4a5d      	ldr	r2, [pc, #372]	; (8002798 <HAL_RCC_ClockConfig+0x1fc>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	4b59      	ldr	r3, [pc, #356]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 800262e:	430a      	orrs	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	4013      	ands	r3, r2
 800263a:	d057      	beq.n	80026ec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	029b      	lsls	r3, r3, #10
 800264c:	4013      	ands	r3, r2
 800264e:	d12b      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e097      	b.n	8002784 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d107      	bne.n	800266c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265c:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	049b      	lsls	r3, r3, #18
 8002664:	4013      	ands	r3, r2
 8002666:	d11f      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e08b      	b.n	8002784 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002674:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4013      	ands	r3, r2
 800267e:	d113      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e07f      	b.n	8002784 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d106      	bne.n	800269a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800268c:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 800268e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002690:	2202      	movs	r2, #2
 8002692:	4013      	ands	r3, r2
 8002694:	d108      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e074      	b.n	8002784 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269a:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e06d      	b.n	8002784 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a8:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2207      	movs	r2, #7
 80026ae:	4393      	bics	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4b37      	ldr	r3, [pc, #220]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026bc:	f7fe fc48 	bl	8000f50 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c4:	e009      	b.n	80026da <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c6:	f7fe fc43 	bl	8000f50 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	4a2f      	ldr	r2, [pc, #188]	; (8002790 <HAL_RCC_ClockConfig+0x1f4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e054      	b.n	8002784 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2238      	movs	r2, #56	; 0x38
 80026e0:	401a      	ands	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1ec      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_ClockConfig+0x1f0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2207      	movs	r2, #7
 80026f2:	4013      	ands	r3, r2
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d21e      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_ClockConfig+0x1f0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2207      	movs	r2, #7
 8002700:	4393      	bics	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_RCC_ClockConfig+0x1f0>)
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800270c:	f7fe fc20 	bl	8000f50 <HAL_GetTick>
 8002710:	0003      	movs	r3, r0
 8002712:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002714:	e009      	b.n	800272a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002716:	f7fe fc1b 	bl	8000f50 <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <HAL_RCC_ClockConfig+0x1f4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e02c      	b.n	8002784 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_RCC_ClockConfig+0x1f0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2207      	movs	r2, #7
 8002730:	4013      	ands	r3, r2
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d1ee      	bne.n	8002716 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2204      	movs	r2, #4
 800273e:	4013      	ands	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4a15      	ldr	r2, [pc, #84]	; (800279c <HAL_RCC_ClockConfig+0x200>)
 8002748:	4013      	ands	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 8002752:	430a      	orrs	r2, r1
 8002754:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002756:	f000 f829 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 800275a:	0001      	movs	r1, r0
 800275c:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <HAL_RCC_ClockConfig+0x1f8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	220f      	movs	r2, #15
 8002764:	401a      	ands	r2, r3
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <HAL_RCC_ClockConfig+0x204>)
 8002768:	0092      	lsls	r2, r2, #2
 800276a:	58d3      	ldr	r3, [r2, r3]
 800276c:	221f      	movs	r2, #31
 800276e:	4013      	ands	r3, r2
 8002770:	000a      	movs	r2, r1
 8002772:	40da      	lsrs	r2, r3
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_ClockConfig+0x208>)
 8002776:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x20c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0018      	movs	r0, r3
 800277e:	f7fe fb8d 	bl	8000e9c <HAL_InitTick>
 8002782:	0003      	movs	r3, r0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40022000 	.word	0x40022000
 8002790:	00001388 	.word	0x00001388
 8002794:	40021000 	.word	0x40021000
 8002798:	fffff0ff 	.word	0xfffff0ff
 800279c:	ffff8fff 	.word	0xffff8fff
 80027a0:	08005404 	.word	0x08005404
 80027a4:	20000000 	.word	0x20000000
 80027a8:	20000004 	.word	0x20000004

080027ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027b2:	4b3c      	ldr	r3, [pc, #240]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2238      	movs	r2, #56	; 0x38
 80027b8:	4013      	ands	r3, r2
 80027ba:	d10f      	bne.n	80027dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027bc:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	0adb      	lsrs	r3, r3, #11
 80027c2:	2207      	movs	r2, #7
 80027c4:	4013      	ands	r3, r2
 80027c6:	2201      	movs	r2, #1
 80027c8:	409a      	lsls	r2, r3
 80027ca:	0013      	movs	r3, r2
 80027cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027ce:	6839      	ldr	r1, [r7, #0]
 80027d0:	4835      	ldr	r0, [pc, #212]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027d2:	f7fd fc97 	bl	8000104 <__udivsi3>
 80027d6:	0003      	movs	r3, r0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	e05d      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027dc:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2238      	movs	r2, #56	; 0x38
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d102      	bne.n	80027ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <HAL_RCC_GetSysClockFreq+0x100>)
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	e054      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027ee:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2238      	movs	r2, #56	; 0x38
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d138      	bne.n	800286c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027fa:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2203      	movs	r2, #3
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	2207      	movs	r2, #7
 800280c:	4013      	ands	r3, r2
 800280e:	3301      	adds	r3, #1
 8002810:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d10d      	bne.n	8002834 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	4824      	ldr	r0, [pc, #144]	; (80028ac <HAL_RCC_GetSysClockFreq+0x100>)
 800281c:	f7fd fc72 	bl	8000104 <__udivsi3>
 8002820:	0003      	movs	r3, r0
 8002822:	0019      	movs	r1, r3
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	227f      	movs	r2, #127	; 0x7f
 800282c:	4013      	ands	r3, r2
 800282e:	434b      	muls	r3, r1
 8002830:	617b      	str	r3, [r7, #20]
        break;
 8002832:	e00d      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	481c      	ldr	r0, [pc, #112]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002838:	f7fd fc64 	bl	8000104 <__udivsi3>
 800283c:	0003      	movs	r3, r0
 800283e:	0019      	movs	r1, r3
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	227f      	movs	r2, #127	; 0x7f
 8002848:	4013      	ands	r3, r2
 800284a:	434b      	muls	r3, r1
 800284c:	617b      	str	r3, [r7, #20]
        break;
 800284e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0f5b      	lsrs	r3, r3, #29
 8002856:	2207      	movs	r2, #7
 8002858:	4013      	ands	r3, r2
 800285a:	3301      	adds	r3, #1
 800285c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	6978      	ldr	r0, [r7, #20]
 8002862:	f7fd fc4f 	bl	8000104 <__udivsi3>
 8002866:	0003      	movs	r3, r0
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	e015      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2238      	movs	r2, #56	; 0x38
 8002872:	4013      	ands	r3, r2
 8002874:	2b20      	cmp	r3, #32
 8002876:	d103      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	e00b      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2238      	movs	r2, #56	; 0x38
 8002886:	4013      	ands	r3, r2
 8002888:	2b18      	cmp	r3, #24
 800288a:	d103      	bne.n	8002894 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800288c:	23fa      	movs	r3, #250	; 0xfa
 800288e:	01db      	lsls	r3, r3, #7
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	e001      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002898:	693b      	ldr	r3, [r7, #16]
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b006      	add	sp, #24
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	40021000 	.word	0x40021000
 80028a8:	00f42400 	.word	0x00f42400
 80028ac:	007a1200 	.word	0x007a1200

080028b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b4:	4b02      	ldr	r3, [pc, #8]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	20000000 	.word	0x20000000

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c4:	b5b0      	push	{r4, r5, r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028c8:	f7ff fff2 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028cc:	0004      	movs	r4, r0
 80028ce:	f7ff fb39 	bl	8001f44 <LL_RCC_GetAPB1Prescaler>
 80028d2:	0003      	movs	r3, r0
 80028d4:	0b1a      	lsrs	r2, r3, #12
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80028d8:	0092      	lsls	r2, r2, #2
 80028da:	58d3      	ldr	r3, [r2, r3]
 80028dc:	221f      	movs	r2, #31
 80028de:	4013      	ands	r3, r2
 80028e0:	40dc      	lsrs	r4, r3
 80028e2:	0023      	movs	r3, r4
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	08005444 	.word	0x08005444

080028f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028f8:	2313      	movs	r3, #19
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002900:	2312      	movs	r3, #18
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	029b      	lsls	r3, r3, #10
 8002910:	4013      	ands	r3, r2
 8002912:	d100      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002914:	e0a4      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002916:	2311      	movs	r3, #17
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291e:	4ba5      	ldr	r3, [pc, #660]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	055b      	lsls	r3, r3, #21
 8002926:	4013      	ands	r3, r2
 8002928:	d111      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4ba2      	ldr	r3, [pc, #648]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800292c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800292e:	4ba1      	ldr	r3, [pc, #644]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	0549      	lsls	r1, r1, #21
 8002934:	430a      	orrs	r2, r1
 8002936:	63da      	str	r2, [r3, #60]	; 0x3c
 8002938:	4b9e      	ldr	r3, [pc, #632]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800293a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	055b      	lsls	r3, r3, #21
 8002940:	4013      	ands	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002946:	2311      	movs	r3, #17
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294e:	4b9a      	ldr	r3, [pc, #616]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b99      	ldr	r3, [pc, #612]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	0049      	lsls	r1, r1, #1
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800295c:	f7fe faf8 	bl	8000f50 <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002964:	e00b      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002966:	f7fe faf3 	bl	8000f50 <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d904      	bls.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002974:	2313      	movs	r3, #19
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	2203      	movs	r2, #3
 800297a:	701a      	strb	r2, [r3, #0]
        break;
 800297c:	e005      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800297e:	4b8e      	ldr	r3, [pc, #568]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4013      	ands	r3, r2
 8002988:	d0ed      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800298a:	2313      	movs	r3, #19
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d154      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002994:	4b87      	ldr	r3, [pc, #540]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002996:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002998:	23c0      	movs	r3, #192	; 0xc0
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4013      	ands	r3, r2
 800299e:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d019      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xea>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d014      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029b0:	4b80      	ldr	r3, [pc, #512]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	4a81      	ldr	r2, [pc, #516]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029ba:	4b7e      	ldr	r3, [pc, #504]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029be:	4b7d      	ldr	r3, [pc, #500]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	0249      	lsls	r1, r1, #9
 80029c4:	430a      	orrs	r2, r1
 80029c6:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029c8:	4b7a      	ldr	r3, [pc, #488]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029cc:	4b79      	ldr	r3, [pc, #484]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029ce:	497c      	ldr	r1, [pc, #496]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029d4:	4b77      	ldr	r3, [pc, #476]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2201      	movs	r2, #1
 80029de:	4013      	ands	r3, r2
 80029e0:	d016      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fab5 	bl	8000f50 <HAL_GetTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ea:	e00c      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fab0 	bl	8000f50 <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	4a73      	ldr	r2, [pc, #460]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d904      	bls.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80029fc:	2313      	movs	r3, #19
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	2203      	movs	r2, #3
 8002a02:	701a      	strb	r2, [r3, #0]
            break;
 8002a04:	e004      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a06:	4b6b      	ldr	r3, [pc, #428]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d0ed      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002a10:	2313      	movs	r3, #19
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a1a:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	4a67      	ldr	r2, [pc, #412]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a2e:	e00c      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a30:	2312      	movs	r3, #18
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	2213      	movs	r2, #19
 8002a36:	18ba      	adds	r2, r7, r2
 8002a38:	7812      	ldrb	r2, [r2, #0]
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e005      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3e:	2312      	movs	r3, #18
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2213      	movs	r2, #19
 8002a44:	18ba      	adds	r2, r7, r2
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a4a:	2311      	movs	r3, #17
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a54:	4b57      	ldr	r3, [pc, #348]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a58:	4b56      	ldr	r3, [pc, #344]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a5a:	495b      	ldr	r1, [pc, #364]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2201      	movs	r2, #1
 8002a66:	4013      	ands	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a6a:	4b52      	ldr	r3, [pc, #328]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	2203      	movs	r2, #3
 8002a70:	4393      	bics	r3, r2
 8002a72:	0019      	movs	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2220      	movs	r2, #32
 8002a84:	4013      	ands	r3, r2
 8002a86:	d009      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a88:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	4a4f      	ldr	r2, [pc, #316]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	0019      	movs	r1, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aa8:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	4a48      	ldr	r2, [pc, #288]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d009      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ac8:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	4a41      	ldr	r2, [pc, #260]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2240      	movs	r2, #64	; 0x40
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d009      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae6:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	4a3b      	ldr	r2, [pc, #236]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002af6:	430a      	orrs	r2, r1
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	01db      	lsls	r3, r3, #7
 8002b02:	4013      	ands	r3, r2
 8002b04:	d015      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b06:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	0899      	lsrs	r1, r3, #2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	05db      	lsls	r3, r3, #23
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d106      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	0249      	lsls	r1, r1, #9
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	039b      	lsls	r3, r3, #14
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d016      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	0019      	movs	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1a      	ldr	r2, [r3, #32]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	03db      	lsls	r3, r3, #15
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	0449      	lsls	r1, r1, #17
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	4013      	ands	r3, r2
 8002b76:	d016      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7c:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	01db      	lsls	r3, r3, #7
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	0249      	lsls	r1, r1, #9
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002ba6:	2312      	movs	r3, #18
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	781b      	ldrb	r3, [r3, #0]
}
 8002bac:	0018      	movs	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b006      	add	sp, #24
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	fffffcff 	.word	0xfffffcff
 8002bc0:	fffeffff 	.word	0xfffeffff
 8002bc4:	00001388 	.word	0x00001388
 8002bc8:	efffffff 	.word	0xefffffff
 8002bcc:	fffff3ff 	.word	0xfffff3ff
 8002bd0:	fff3ffff 	.word	0xfff3ffff
 8002bd4:	ffcfffff 	.word	0xffcfffff
 8002bd8:	ffffcfff 	.word	0xffffcfff
 8002bdc:	ffbfffff 	.word	0xffbfffff
 8002be0:	ffff3fff 	.word	0xffff3fff

08002be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e01e      	b.n	8002c34 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	223d      	movs	r2, #61	; 0x3d
 8002bfa:	5c9b      	ldrb	r3, [r3, r2]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d107      	bne.n	8002c12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	223c      	movs	r2, #60	; 0x3c
 8002c06:	2100      	movs	r1, #0
 8002c08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f7fd fff1 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	223d      	movs	r2, #61	; 0x3d
 8002c16:	2102      	movs	r1, #2
 8002c18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	0019      	movs	r1, r3
 8002c24:	0010      	movs	r0, r2
 8002c26:	f000 fb77 	bl	8003318 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	223d      	movs	r2, #61	; 0x3d
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2101      	movs	r1, #1
 8002c50:	430a      	orrs	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <HAL_TIM_Base_Start_IT+0x50>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b06      	cmp	r3, #6
 8002c64:	d00c      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x44>
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	025b      	lsls	r3, r3, #9
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d007      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x44>
  {
    __HAL_TIM_ENABLE(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b004      	add	sp, #16
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	00010007 	.word	0x00010007

08002c90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e01e      	b.n	8002ce0 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	223d      	movs	r2, #61	; 0x3d
 8002ca6:	5c9b      	ldrb	r3, [r3, r2]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d107      	bne.n	8002cbe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	223c      	movs	r2, #60	; 0x3c
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f000 f815 	bl	8002ce8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	223d      	movs	r2, #61	; 0x3d
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	0019      	movs	r1, r3
 8002cd0:	0010      	movs	r0, r2
 8002cd2:	f000 fb21 	bl	8003318 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	223d      	movs	r2, #61	; 0x3d
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2202      	movs	r2, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d124      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2202      	movs	r2, #2
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d11d      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2203      	movs	r2, #3
 8002d22:	4252      	negs	r2, r2
 8002d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2203      	movs	r2, #3
 8002d34:	4013      	ands	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 fad4 	bl	80032e8 <HAL_TIM_IC_CaptureCallback>
 8002d40:	e007      	b.n	8002d52 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f000 fac7 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 fad3 	bl	80032f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d125      	bne.n	8002db2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d11e      	bne.n	8002db2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2205      	movs	r2, #5
 8002d7a:	4252      	negs	r2, r2
 8002d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	23c0      	movs	r3, #192	; 0xc0
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f000 faa7 	bl	80032e8 <HAL_TIM_IC_CaptureCallback>
 8002d9a:	e007      	b.n	8002dac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 fa9a 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 faa6 	bl	80032f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2208      	movs	r2, #8
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d124      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11d      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2209      	movs	r2, #9
 8002dd4:	4252      	negs	r2, r2
 8002dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2203      	movs	r2, #3
 8002de6:	4013      	ands	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 fa7b 	bl	80032e8 <HAL_TIM_IC_CaptureCallback>
 8002df2:	e007      	b.n	8002e04 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 fa6e 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 fa7a 	bl	80032f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	2210      	movs	r2, #16
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d125      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2210      	movs	r2, #16
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d11e      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2211      	movs	r2, #17
 8002e2c:	4252      	negs	r2, r2
 8002e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2208      	movs	r2, #8
 8002e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	23c0      	movs	r3, #192	; 0xc0
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4013      	ands	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 fa4e 	bl	80032e8 <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e007      	b.n	8002e5e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 fa41 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 fa4d 	bl	80032f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10f      	bne.n	8002e92 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d108      	bne.n	8002e92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2202      	movs	r2, #2
 8002e86:	4252      	negs	r2, r2
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7fd fd21 	bl	80008d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2280      	movs	r2, #128	; 0x80
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b80      	cmp	r3, #128	; 0x80
 8002e9e:	d10f      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b80      	cmp	r3, #128	; 0x80
 8002eac:	d108      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2281      	movs	r2, #129	; 0x81
 8002eb4:	4252      	negs	r2, r2
 8002eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 fede 	bl	8003c7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	401a      	ands	r2, r3
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d10e      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b80      	cmp	r3, #128	; 0x80
 8002ee0:	d107      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <HAL_TIM_IRQHandler+0x260>)
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 fecd 	bl	8003c8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2240      	movs	r2, #64	; 0x40
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d10f      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2240      	movs	r2, #64	; 0x40
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d108      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2241      	movs	r2, #65	; 0x41
 8002f14:	4252      	negs	r2, r2
 8002f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f9f4 	bl	8003308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2220      	movs	r2, #32
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d10f      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d108      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2221      	movs	r2, #33	; 0x21
 8002f42:	4252      	negs	r2, r2
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 fe8f 	bl	8003c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b002      	add	sp, #8
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	fffffeff 	.word	0xfffffeff

08002f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	223c      	movs	r2, #60	; 0x3c
 8002f6c:	5c9b      	ldrb	r3, [r3, r2]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e0e7      	b.n	8003146 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	223c      	movs	r2, #60	; 0x3c
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	223d      	movs	r2, #61	; 0x3d
 8002f82:	2102      	movs	r1, #2
 8002f84:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b14      	cmp	r3, #20
 8002f8a:	d900      	bls.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002f8c:	e0d1      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	009a      	lsls	r2, r3, #2
 8002f92:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8002f94:	18d3      	adds	r3, r2, r3
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	0011      	movs	r1, r2
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 fa2e 	bl	8003404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2108      	movs	r1, #8
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2104      	movs	r1, #4
 8002fc4:	438a      	bics	r2, r1
 8002fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6999      	ldr	r1, [r3, #24]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	619a      	str	r2, [r3, #24]
      break;
 8002fda:	e0ab      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	0011      	movs	r1, r2
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 fa8d 	bl	8003504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	0109      	lsls	r1, r1, #4
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4953      	ldr	r1, [pc, #332]	; (8003154 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003008:	400a      	ands	r2, r1
 800300a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6999      	ldr	r1, [r3, #24]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	619a      	str	r2, [r3, #24]
      break;
 8003020:	e088      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	0011      	movs	r1, r2
 800302a:	0018      	movs	r0, r3
 800302c:	f000 fae8 	bl	8003600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2108      	movs	r1, #8
 800303c:	430a      	orrs	r2, r1
 800303e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2104      	movs	r1, #4
 800304c:	438a      	bics	r2, r1
 800304e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69d9      	ldr	r1, [r3, #28]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	61da      	str	r2, [r3, #28]
      break;
 8003062:	e067      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	0011      	movs	r1, r2
 800306c:	0018      	movs	r0, r3
 800306e:	f000 fb49 	bl	8003704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	0109      	lsls	r1, r1, #4
 8003080:	430a      	orrs	r2, r1
 8003082:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4931      	ldr	r1, [pc, #196]	; (8003154 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003090:	400a      	ands	r2, r1
 8003092:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69d9      	ldr	r1, [r3, #28]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	021a      	lsls	r2, r3, #8
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	61da      	str	r2, [r3, #28]
      break;
 80030a8:	e044      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	0011      	movs	r1, r2
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 fb8a 	bl	80037cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2108      	movs	r1, #8
 80030c4:	430a      	orrs	r2, r1
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2104      	movs	r1, #4
 80030d4:	438a      	bics	r2, r1
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030ea:	e023      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	0011      	movs	r1, r2
 80030f4:	0018      	movs	r0, r3
 80030f6:	f000 fbc3 	bl	8003880 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2180      	movs	r1, #128	; 0x80
 8003106:	0109      	lsls	r1, r1, #4
 8003108:	430a      	orrs	r2, r1
 800310a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	490f      	ldr	r1, [pc, #60]	; (8003154 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003118:	400a      	ands	r2, r1
 800311a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	021a      	lsls	r2, r3, #8
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003130:	e000      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    }

    default:
      break;
 8003132:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	223d      	movs	r2, #61	; 0x3d
 8003138:	2101      	movs	r1, #1
 800313a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	223c      	movs	r2, #60	; 0x3c
 8003140:	2100      	movs	r1, #0
 8003142:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b004      	add	sp, #16
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	08005464 	.word	0x08005464
 8003154:	fffffbff 	.word	0xfffffbff

08003158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	223c      	movs	r2, #60	; 0x3c
 8003166:	5c9b      	ldrb	r3, [r3, r2]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_TIM_ConfigClockSource+0x18>
 800316c:	2302      	movs	r3, #2
 800316e:	e0ab      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x170>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	223c      	movs	r2, #60	; 0x3c
 8003174:	2101      	movs	r1, #1
 8003176:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	223d      	movs	r2, #61	; 0x3d
 800317c:	2102      	movs	r1, #2
 800317e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <HAL_TIM_ConfigClockSource+0x178>)
 800318c:	4013      	ands	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a50      	ldr	r2, [pc, #320]	; (80032d4 <HAL_TIM_ConfigClockSource+0x17c>)
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d100      	bne.n	80031aa <HAL_TIM_ConfigClockSource+0x52>
 80031a8:	e06b      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x12a>
 80031aa:	d80e      	bhi.n	80031ca <HAL_TIM_ConfigClockSource+0x72>
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d100      	bne.n	80031b2 <HAL_TIM_ConfigClockSource+0x5a>
 80031b0:	e077      	b.n	80032a2 <HAL_TIM_ConfigClockSource+0x14a>
 80031b2:	d803      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x64>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d100      	bne.n	80031ba <HAL_TIM_ConfigClockSource+0x62>
 80031b8:	e073      	b.n	80032a2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80031ba:	e07c      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d100      	bne.n	80031c2 <HAL_TIM_ConfigClockSource+0x6a>
 80031c0:	e06f      	b.n	80032a2 <HAL_TIM_ConfigClockSource+0x14a>
 80031c2:	2b30      	cmp	r3, #48	; 0x30
 80031c4:	d100      	bne.n	80031c8 <HAL_TIM_ConfigClockSource+0x70>
 80031c6:	e06c      	b.n	80032a2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80031c8:	e075      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80031ca:	2b70      	cmp	r3, #112	; 0x70
 80031cc:	d00e      	beq.n	80031ec <HAL_TIM_ConfigClockSource+0x94>
 80031ce:	d804      	bhi.n	80031da <HAL_TIM_ConfigClockSource+0x82>
 80031d0:	2b50      	cmp	r3, #80	; 0x50
 80031d2:	d036      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0xea>
 80031d4:	2b60      	cmp	r3, #96	; 0x60
 80031d6:	d044      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80031d8:	e06d      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	0152      	lsls	r2, r2, #5
 80031de:	4293      	cmp	r3, r2
 80031e0:	d068      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0x15c>
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	0192      	lsls	r2, r2, #6
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d017      	beq.n	800321a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80031ea:	e064      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f000 fc1a 	bl	8003a34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2277      	movs	r2, #119	; 0x77
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	609a      	str	r2, [r3, #8]
      break;
 8003218:	e04d      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f000 fc03 	bl	8003a34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	01c9      	lsls	r1, r1, #7
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
      break;
 8003240:	e039      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	001a      	movs	r2, r3
 8003250:	f000 fb74 	bl	800393c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2150      	movs	r1, #80	; 0x50
 800325a:	0018      	movs	r0, r3
 800325c:	f000 fbce 	bl	80039fc <TIM_ITRx_SetConfig>
      break;
 8003260:	e029      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	001a      	movs	r2, r3
 8003270:	f000 fb92 	bl	8003998 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2160      	movs	r1, #96	; 0x60
 800327a:	0018      	movs	r0, r3
 800327c:	f000 fbbe 	bl	80039fc <TIM_ITRx_SetConfig>
      break;
 8003280:	e019      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	001a      	movs	r2, r3
 8003290:	f000 fb54 	bl	800393c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2140      	movs	r1, #64	; 0x40
 800329a:	0018      	movs	r0, r3
 800329c:	f000 fbae 	bl	80039fc <TIM_ITRx_SetConfig>
      break;
 80032a0:	e009      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0019      	movs	r1, r3
 80032ac:	0010      	movs	r0, r2
 80032ae:	f000 fba5 	bl	80039fc <TIM_ITRx_SetConfig>
      break;
 80032b2:	e000      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80032b4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	223d      	movs	r2, #61	; 0x3d
 80032ba:	2101      	movs	r1, #1
 80032bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	223c      	movs	r2, #60	; 0x3c
 80032c2:	2100      	movs	r1, #0
 80032c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b004      	add	sp, #16
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	ffceff88 	.word	0xffceff88
 80032d4:	ffff00ff 	.word	0xffff00ff

080032d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b002      	add	sp, #8
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003310:	46c0      	nop			; (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}

08003318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a30      	ldr	r2, [pc, #192]	; (80033ec <TIM_Base_SetConfig+0xd4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d008      	beq.n	8003342 <TIM_Base_SetConfig+0x2a>
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	2380      	movs	r3, #128	; 0x80
 8003334:	05db      	lsls	r3, r3, #23
 8003336:	429a      	cmp	r2, r3
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0x2a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <TIM_Base_SetConfig+0xd8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d108      	bne.n	8003354 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2270      	movs	r2, #112	; 0x70
 8003346:	4393      	bics	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a25      	ldr	r2, [pc, #148]	; (80033ec <TIM_Base_SetConfig+0xd4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d014      	beq.n	8003386 <TIM_Base_SetConfig+0x6e>
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	05db      	lsls	r3, r3, #23
 8003362:	429a      	cmp	r2, r3
 8003364:	d00f      	beq.n	8003386 <TIM_Base_SetConfig+0x6e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a21      	ldr	r2, [pc, #132]	; (80033f0 <TIM_Base_SetConfig+0xd8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00b      	beq.n	8003386 <TIM_Base_SetConfig+0x6e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a20      	ldr	r2, [pc, #128]	; (80033f4 <TIM_Base_SetConfig+0xdc>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <TIM_Base_SetConfig+0x6e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <TIM_Base_SetConfig+0xe0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d003      	beq.n	8003386 <TIM_Base_SetConfig+0x6e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <TIM_Base_SetConfig+0xe4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d108      	bne.n	8003398 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <TIM_Base_SetConfig+0xe8>)
 800338a:	4013      	ands	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2280      	movs	r2, #128	; 0x80
 800339c:	4393      	bics	r3, r2
 800339e:	001a      	movs	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <TIM_Base_SetConfig+0xd4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <TIM_Base_SetConfig+0xbe>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <TIM_Base_SetConfig+0xe0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_Base_SetConfig+0xbe>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <TIM_Base_SetConfig+0xe4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d103      	bne.n	80033de <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	615a      	str	r2, [r3, #20]
}
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b004      	add	sp, #16
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40002000 	.word	0x40002000
 80033f8:	40014400 	.word	0x40014400
 80033fc:	40014800 	.word	0x40014800
 8003400:	fffffcff 	.word	0xfffffcff

08003404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	2201      	movs	r2, #1
 8003414:	4393      	bics	r3, r2
 8003416:	001a      	movs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a2e      	ldr	r2, [pc, #184]	; (80034ec <TIM_OC1_SetConfig+0xe8>)
 8003432:	4013      	ands	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2203      	movs	r2, #3
 800343a:	4393      	bics	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2202      	movs	r2, #2
 800344c:	4393      	bics	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a24      	ldr	r2, [pc, #144]	; (80034f0 <TIM_OC1_SetConfig+0xec>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_OC1_SetConfig+0x6e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a23      	ldr	r2, [pc, #140]	; (80034f4 <TIM_OC1_SetConfig+0xf0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_OC1_SetConfig+0x6e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a22      	ldr	r2, [pc, #136]	; (80034f8 <TIM_OC1_SetConfig+0xf4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10c      	bne.n	800348c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2208      	movs	r2, #8
 8003476:	4393      	bics	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2204      	movs	r2, #4
 8003488:	4393      	bics	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <TIM_OC1_SetConfig+0xec>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d007      	beq.n	80034a4 <TIM_OC1_SetConfig+0xa0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <TIM_OC1_SetConfig+0xf0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d003      	beq.n	80034a4 <TIM_OC1_SetConfig+0xa0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a16      	ldr	r2, [pc, #88]	; (80034f8 <TIM_OC1_SetConfig+0xf4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d111      	bne.n	80034c8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4a15      	ldr	r2, [pc, #84]	; (80034fc <TIM_OC1_SetConfig+0xf8>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4a14      	ldr	r2, [pc, #80]	; (8003500 <TIM_OC1_SetConfig+0xfc>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	621a      	str	r2, [r3, #32]
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b006      	add	sp, #24
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	fffeff8f 	.word	0xfffeff8f
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40014400 	.word	0x40014400
 80034f8:	40014800 	.word	0x40014800
 80034fc:	fffffeff 	.word	0xfffffeff
 8003500:	fffffdff 	.word	0xfffffdff

08003504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	2210      	movs	r2, #16
 8003514:	4393      	bics	r3, r2
 8003516:	001a      	movs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <TIM_OC2_SetConfig+0xe0>)
 8003532:	4013      	ands	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4a2b      	ldr	r2, [pc, #172]	; (80035e8 <TIM_OC2_SetConfig+0xe4>)
 800353a:	4013      	ands	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2220      	movs	r2, #32
 800354e:	4393      	bics	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a22      	ldr	r2, [pc, #136]	; (80035ec <TIM_OC2_SetConfig+0xe8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d10d      	bne.n	8003582 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	4393      	bics	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2240      	movs	r2, #64	; 0x40
 800357e:	4393      	bics	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a19      	ldr	r2, [pc, #100]	; (80035ec <TIM_OC2_SetConfig+0xe8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <TIM_OC2_SetConfig+0x96>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <TIM_OC2_SetConfig+0xec>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_OC2_SetConfig+0x96>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <TIM_OC2_SetConfig+0xf0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d113      	bne.n	80035c2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <TIM_OC2_SetConfig+0xf4>)
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4a15      	ldr	r2, [pc, #84]	; (80035fc <TIM_OC2_SetConfig+0xf8>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	621a      	str	r2, [r3, #32]
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b006      	add	sp, #24
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	feff8fff 	.word	0xfeff8fff
 80035e8:	fffffcff 	.word	0xfffffcff
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800
 80035f8:	fffffbff 	.word	0xfffffbff
 80035fc:	fffff7ff 	.word	0xfffff7ff

08003600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a33      	ldr	r2, [pc, #204]	; (80036dc <TIM_OC3_SetConfig+0xdc>)
 8003610:	401a      	ands	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a2d      	ldr	r2, [pc, #180]	; (80036e0 <TIM_OC3_SetConfig+0xe0>)
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2203      	movs	r2, #3
 8003634:	4393      	bics	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <TIM_OC3_SetConfig+0xe4>)
 8003646:	4013      	ands	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a23      	ldr	r2, [pc, #140]	; (80036e8 <TIM_OC3_SetConfig+0xe8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10d      	bne.n	800367a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	4a22      	ldr	r2, [pc, #136]	; (80036ec <TIM_OC3_SetConfig+0xec>)
 8003662:	4013      	ands	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <TIM_OC3_SetConfig+0xf0>)
 8003676:	4013      	ands	r3, r2
 8003678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <TIM_OC3_SetConfig+0xe8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <TIM_OC3_SetConfig+0x92>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <TIM_OC3_SetConfig+0xf4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_OC3_SetConfig+0x92>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <TIM_OC3_SetConfig+0xf8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d113      	bne.n	80036ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4a19      	ldr	r2, [pc, #100]	; (80036fc <TIM_OC3_SetConfig+0xfc>)
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <TIM_OC3_SetConfig+0x100>)
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	621a      	str	r2, [r3, #32]
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b006      	add	sp, #24
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	fffffeff 	.word	0xfffffeff
 80036e0:	fffeff8f 	.word	0xfffeff8f
 80036e4:	fffffdff 	.word	0xfffffdff
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	fffff7ff 	.word	0xfffff7ff
 80036f0:	fffffbff 	.word	0xfffffbff
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800
 80036fc:	ffffefff 	.word	0xffffefff
 8003700:	ffffdfff 	.word	0xffffdfff

08003704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	4a26      	ldr	r2, [pc, #152]	; (80037ac <TIM_OC4_SetConfig+0xa8>)
 8003714:	401a      	ands	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a20      	ldr	r2, [pc, #128]	; (80037b0 <TIM_OC4_SetConfig+0xac>)
 8003730:	4013      	ands	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <TIM_OC4_SetConfig+0xb0>)
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <TIM_OC4_SetConfig+0xb4>)
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	031b      	lsls	r3, r3, #12
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a17      	ldr	r2, [pc, #92]	; (80037bc <TIM_OC4_SetConfig+0xb8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <TIM_OC4_SetConfig+0x70>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <TIM_OC4_SetConfig+0xbc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_OC4_SetConfig+0x70>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <TIM_OC4_SetConfig+0xc0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d109      	bne.n	8003788 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <TIM_OC4_SetConfig+0xc4>)
 8003778:	4013      	ands	r3, r2
 800377a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	621a      	str	r2, [r3, #32]
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b006      	add	sp, #24
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	ffffefff 	.word	0xffffefff
 80037b0:	feff8fff 	.word	0xfeff8fff
 80037b4:	fffffcff 	.word	0xfffffcff
 80037b8:	ffffdfff 	.word	0xffffdfff
 80037bc:	40012c00 	.word	0x40012c00
 80037c0:	40014400 	.word	0x40014400
 80037c4:	40014800 	.word	0x40014800
 80037c8:	ffffbfff 	.word	0xffffbfff

080037cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4a23      	ldr	r2, [pc, #140]	; (8003868 <TIM_OC5_SetConfig+0x9c>)
 80037dc:	401a      	ands	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a1d      	ldr	r2, [pc, #116]	; (800386c <TIM_OC5_SetConfig+0xa0>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4a19      	ldr	r2, [pc, #100]	; (8003870 <TIM_OC5_SetConfig+0xa4>)
 800380a:	4013      	ands	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	041b      	lsls	r3, r3, #16
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a15      	ldr	r2, [pc, #84]	; (8003874 <TIM_OC5_SetConfig+0xa8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d007      	beq.n	8003832 <TIM_OC5_SetConfig+0x66>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <TIM_OC5_SetConfig+0xac>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d003      	beq.n	8003832 <TIM_OC5_SetConfig+0x66>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a13      	ldr	r2, [pc, #76]	; (800387c <TIM_OC5_SetConfig+0xb0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d109      	bne.n	8003846 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	4a0c      	ldr	r2, [pc, #48]	; (8003868 <TIM_OC5_SetConfig+0x9c>)
 8003836:	4013      	ands	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	621a      	str	r2, [r3, #32]
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b006      	add	sp, #24
 8003866:	bd80      	pop	{r7, pc}
 8003868:	fffeffff 	.word	0xfffeffff
 800386c:	fffeff8f 	.word	0xfffeff8f
 8003870:	fffdffff 	.word	0xfffdffff
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40014400 	.word	0x40014400
 800387c:	40014800 	.word	0x40014800

08003880 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a24      	ldr	r2, [pc, #144]	; (8003920 <TIM_OC6_SetConfig+0xa0>)
 8003890:	401a      	ands	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <TIM_OC6_SetConfig+0xa4>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4a1a      	ldr	r2, [pc, #104]	; (8003928 <TIM_OC6_SetConfig+0xa8>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	051b      	lsls	r3, r3, #20
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a16      	ldr	r2, [pc, #88]	; (800392c <TIM_OC6_SetConfig+0xac>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_OC6_SetConfig+0x68>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a15      	ldr	r2, [pc, #84]	; (8003930 <TIM_OC6_SetConfig+0xb0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_OC6_SetConfig+0x68>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a14      	ldr	r2, [pc, #80]	; (8003934 <TIM_OC6_SetConfig+0xb4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d109      	bne.n	80038fc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	4a13      	ldr	r2, [pc, #76]	; (8003938 <TIM_OC6_SetConfig+0xb8>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	029b      	lsls	r3, r3, #10
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	621a      	str	r2, [r3, #32]
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b006      	add	sp, #24
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	ffefffff 	.word	0xffefffff
 8003924:	feff8fff 	.word	0xfeff8fff
 8003928:	ffdfffff 	.word	0xffdfffff
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40014400 	.word	0x40014400
 8003934:	40014800 	.word	0x40014800
 8003938:	fffbffff 	.word	0xfffbffff

0800393c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	2201      	movs	r2, #1
 8003954:	4393      	bics	r3, r2
 8003956:	001a      	movs	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	22f0      	movs	r2, #240	; 0xf0
 8003966:	4393      	bics	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	220a      	movs	r2, #10
 8003978:	4393      	bics	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	621a      	str	r2, [r3, #32]
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b006      	add	sp, #24
 8003996:	bd80      	pop	{r7, pc}

08003998 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	2210      	movs	r2, #16
 80039aa:	4393      	bics	r3, r2
 80039ac:	001a      	movs	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	4a0d      	ldr	r2, [pc, #52]	; (80039f8 <TIM_TI2_ConfigInputStage+0x60>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	031b      	lsls	r3, r3, #12
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	22a0      	movs	r2, #160	; 0xa0
 80039d4:	4393      	bics	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b006      	add	sp, #24
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	ffff0fff 	.word	0xffff0fff

080039fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <TIM_ITRx_SetConfig+0x34>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	2207      	movs	r2, #7
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	609a      	str	r2, [r3, #8]
}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b004      	add	sp, #16
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	ffcfff8f 	.word	0xffcfff8f

08003a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <TIM_ETR_SetConfig+0x3c>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	021a      	lsls	r2, r3, #8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	609a      	str	r2, [r3, #8]
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b006      	add	sp, #24
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	ffff00ff 	.word	0xffff00ff

08003a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	223c      	movs	r2, #60	; 0x3c
 8003a82:	5c9b      	ldrb	r3, [r3, r2]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e040      	b.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	223c      	movs	r2, #60	; 0x3c
 8003a90:	2101      	movs	r1, #1
 8003a92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	223d      	movs	r2, #61	; 0x3d
 8003a98:	2102      	movs	r1, #2
 8003a9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d108      	bne.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2270      	movs	r2, #112	; 0x70
 8003acc:	4393      	bics	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2280      	movs	r2, #128	; 0x80
 8003ade:	4393      	bics	r3, r2
 8003ae0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	223d      	movs	r2, #61	; 0x3d
 8003b00:	2101      	movs	r1, #1
 8003b02:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	223c      	movs	r2, #60	; 0x3c
 8003b08:	2100      	movs	r1, #0
 8003b0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b004      	add	sp, #16
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	ff0fffff 	.word	0xff0fffff

08003b20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	223c      	movs	r2, #60	; 0x3c
 8003b32:	5c9b      	ldrb	r3, [r3, r2]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e079      	b.n	8003c30 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	223c      	movs	r2, #60	; 0x3c
 8003b40:	2101      	movs	r1, #1
 8003b42:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	22ff      	movs	r2, #255	; 0xff
 8003b48:	4393      	bics	r3, r2
 8003b4a:	001a      	movs	r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a38      	ldr	r2, [pc, #224]	; (8003c38 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003b58:	401a      	ands	r2, r3
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4a35      	ldr	r2, [pc, #212]	; (8003c3c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003b66:	401a      	ands	r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a33      	ldr	r2, [pc, #204]	; (8003c40 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003b74:	401a      	ands	r2, r3
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a30      	ldr	r2, [pc, #192]	; (8003c44 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003b82:	401a      	ands	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a2e      	ldr	r2, [pc, #184]	; (8003c48 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003b90:	401a      	ands	r2, r3
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a2b      	ldr	r2, [pc, #172]	; (8003c4c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a29      	ldr	r2, [pc, #164]	; (8003c50 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003bac:	401a      	ands	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	041b      	lsls	r3, r3, #16
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a25      	ldr	r2, [pc, #148]	; (8003c54 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d106      	bne.n	8003bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a24      	ldr	r2, [pc, #144]	; (8003c58 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1f      	ldr	r2, [pc, #124]	; (8003c54 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d121      	bne.n	8003c1e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003bde:	401a      	ands	r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	051b      	lsls	r3, r3, #20
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003bee:	401a      	ands	r2, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003bfc:	401a      	ands	r2, r3
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d106      	bne.n	8003c1e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003c14:	401a      	ands	r2, r3
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	223c      	movs	r2, #60	; 0x3c
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b004      	add	sp, #16
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	fffffcff 	.word	0xfffffcff
 8003c3c:	fffffbff 	.word	0xfffffbff
 8003c40:	fffff7ff 	.word	0xfffff7ff
 8003c44:	ffffefff 	.word	0xffffefff
 8003c48:	ffffdfff 	.word	0xffffdfff
 8003c4c:	ffffbfff 	.word	0xffffbfff
 8003c50:	fff0ffff 	.word	0xfff0ffff
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	efffffff 	.word	0xefffffff
 8003c5c:	ff0fffff 	.word	0xff0fffff
 8003c60:	feffffff 	.word	0xfeffffff
 8003c64:	fdffffff 	.word	0xfdffffff
 8003c68:	dfffffff 	.word	0xdfffffff

08003c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b002      	add	sp, #8
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c94:	46c0      	nop			; (mov r8, r8)
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e046      	b.n	8003d3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2280      	movs	r2, #128	; 0x80
 8003cb2:	589b      	ldr	r3, [r3, r2]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d107      	bne.n	8003cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	227c      	movs	r2, #124	; 0x7c
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7fd f854 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2280      	movs	r2, #128	; 0x80
 8003ccc:	2124      	movs	r1, #36	; 0x24
 8003cce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2101      	movs	r1, #1
 8003cdc:	438a      	bics	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f000 f830 	bl	8003d48 <UART_SetConfig>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e024      	b.n	8003d3c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f001 f8d1 	bl	8004ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	490d      	ldr	r1, [pc, #52]	; (8003d44 <HAL_UART_Init+0xa8>)
 8003d0e:	400a      	ands	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	212a      	movs	r1, #42	; 0x2a
 8003d1e:	438a      	bics	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f001 f969 	bl	800500c <UART_CheckIdleState>
 8003d3a:	0003      	movs	r3, r0
}
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b002      	add	sp, #8
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	ffffb7ff 	.word	0xffffb7ff

08003d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d4a:	b0a1      	sub	sp, #132	; 0x84
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d54:	231b      	movs	r3, #27
 8003d56:	2258      	movs	r2, #88	; 0x58
 8003d58:	18ba      	adds	r2, r7, r2
 8003d5a:	18d2      	adds	r2, r2, r3
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d82:	4313      	orrs	r3, r2
 8003d84:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4bbe      	ldr	r3, [pc, #760]	; (8004088 <UART_SetConfig+0x340>)
 8003d8e:	401a      	ands	r2, r3
 8003d90:	0011      	movs	r1, r2
 8003d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	4bba      	ldr	r3, [pc, #744]	; (800408c <UART_SetConfig+0x344>)
 8003da4:	401a      	ands	r2, r3
 8003da6:	0010      	movs	r0, r2
 8003da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003daa:	68d9      	ldr	r1, [r3, #12]
 8003dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	0003      	movs	r3, r0
 8003db2:	430b      	orrs	r3, r1
 8003db4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	4bb3      	ldr	r3, [pc, #716]	; (8004090 <UART_SetConfig+0x348>)
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d004      	beq.n	8003dd0 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	4baf      	ldr	r3, [pc, #700]	; (8004094 <UART_SetConfig+0x34c>)
 8003dd8:	401a      	ands	r2, r3
 8003dda:	0011      	movs	r1, r2
 8003ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dec:	230f      	movs	r3, #15
 8003dee:	439a      	bics	r2, r3
 8003df0:	0010      	movs	r0, r2
 8003df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4ba4      	ldr	r3, [pc, #656]	; (8004098 <UART_SetConfig+0x350>)
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d12f      	bne.n	8003e6a <UART_SetConfig+0x122>
 8003e0a:	4ba4      	ldr	r3, [pc, #656]	; (800409c <UART_SetConfig+0x354>)
 8003e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e0e:	2303      	movs	r3, #3
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d013      	beq.n	8003e3e <UART_SetConfig+0xf6>
 8003e16:	d304      	bcc.n	8003e22 <UART_SetConfig+0xda>
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d009      	beq.n	8003e30 <UART_SetConfig+0xe8>
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d015      	beq.n	8003e4c <UART_SetConfig+0x104>
 8003e20:	e01b      	b.n	8003e5a <UART_SetConfig+0x112>
 8003e22:	2323      	movs	r3, #35	; 0x23
 8003e24:	2258      	movs	r2, #88	; 0x58
 8003e26:	18ba      	adds	r2, r7, r2
 8003e28:	18d2      	adds	r2, r2, r3
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	7013      	strb	r3, [r2, #0]
 8003e2e:	e070      	b.n	8003f12 <UART_SetConfig+0x1ca>
 8003e30:	2323      	movs	r3, #35	; 0x23
 8003e32:	2258      	movs	r2, #88	; 0x58
 8003e34:	18ba      	adds	r2, r7, r2
 8003e36:	18d2      	adds	r2, r2, r3
 8003e38:	2302      	movs	r3, #2
 8003e3a:	7013      	strb	r3, [r2, #0]
 8003e3c:	e069      	b.n	8003f12 <UART_SetConfig+0x1ca>
 8003e3e:	2323      	movs	r3, #35	; 0x23
 8003e40:	2258      	movs	r2, #88	; 0x58
 8003e42:	18ba      	adds	r2, r7, r2
 8003e44:	18d2      	adds	r2, r2, r3
 8003e46:	2304      	movs	r3, #4
 8003e48:	7013      	strb	r3, [r2, #0]
 8003e4a:	e062      	b.n	8003f12 <UART_SetConfig+0x1ca>
 8003e4c:	2323      	movs	r3, #35	; 0x23
 8003e4e:	2258      	movs	r2, #88	; 0x58
 8003e50:	18ba      	adds	r2, r7, r2
 8003e52:	18d2      	adds	r2, r2, r3
 8003e54:	2308      	movs	r3, #8
 8003e56:	7013      	strb	r3, [r2, #0]
 8003e58:	e05b      	b.n	8003f12 <UART_SetConfig+0x1ca>
 8003e5a:	2323      	movs	r3, #35	; 0x23
 8003e5c:	2258      	movs	r2, #88	; 0x58
 8003e5e:	18ba      	adds	r2, r7, r2
 8003e60:	18d2      	adds	r2, r2, r3
 8003e62:	2310      	movs	r3, #16
 8003e64:	7013      	strb	r3, [r2, #0]
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	e053      	b.n	8003f12 <UART_SetConfig+0x1ca>
 8003e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b8c      	ldr	r3, [pc, #560]	; (80040a0 <UART_SetConfig+0x358>)
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d106      	bne.n	8003e82 <UART_SetConfig+0x13a>
 8003e74:	2323      	movs	r3, #35	; 0x23
 8003e76:	2258      	movs	r2, #88	; 0x58
 8003e78:	18ba      	adds	r2, r7, r2
 8003e7a:	18d2      	adds	r2, r2, r3
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	7013      	strb	r3, [r2, #0]
 8003e80:	e047      	b.n	8003f12 <UART_SetConfig+0x1ca>
 8003e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4b82      	ldr	r3, [pc, #520]	; (8004090 <UART_SetConfig+0x348>)
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d13c      	bne.n	8003f06 <UART_SetConfig+0x1be>
 8003e8c:	4b83      	ldr	r3, [pc, #524]	; (800409c <UART_SetConfig+0x354>)
 8003e8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e90:	23c0      	movs	r3, #192	; 0xc0
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	401a      	ands	r2, r3
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d01d      	beq.n	8003eda <UART_SetConfig+0x192>
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d802      	bhi.n	8003eac <UART_SetConfig+0x164>
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	d009      	beq.n	8003ebe <UART_SetConfig+0x176>
 8003eaa:	e024      	b.n	8003ef6 <UART_SetConfig+0x1ae>
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d00b      	beq.n	8003ecc <UART_SetConfig+0x184>
 8003eb4:	23c0      	movs	r3, #192	; 0xc0
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d015      	beq.n	8003ee8 <UART_SetConfig+0x1a0>
 8003ebc:	e01b      	b.n	8003ef6 <UART_SetConfig+0x1ae>
 8003ebe:	2323      	movs	r3, #35	; 0x23
 8003ec0:	2258      	movs	r2, #88	; 0x58
 8003ec2:	18ba      	adds	r2, r7, r2
 8003ec4:	18d2      	adds	r2, r2, r3
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	7013      	strb	r3, [r2, #0]
 8003eca:	e022      	b.n	8003f12 <UART_SetConfig+0x1ca>
 8003ecc:	2323      	movs	r3, #35	; 0x23
 8003ece:	2258      	movs	r2, #88	; 0x58
 8003ed0:	18ba      	adds	r2, r7, r2
 8003ed2:	18d2      	adds	r2, r2, r3
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	7013      	strb	r3, [r2, #0]
 8003ed8:	e01b      	b.n	8003f12 <UART_SetConfig+0x1ca>
 8003eda:	2323      	movs	r3, #35	; 0x23
 8003edc:	2258      	movs	r2, #88	; 0x58
 8003ede:	18ba      	adds	r2, r7, r2
 8003ee0:	18d2      	adds	r2, r2, r3
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	7013      	strb	r3, [r2, #0]
 8003ee6:	e014      	b.n	8003f12 <UART_SetConfig+0x1ca>
 8003ee8:	2323      	movs	r3, #35	; 0x23
 8003eea:	2258      	movs	r2, #88	; 0x58
 8003eec:	18ba      	adds	r2, r7, r2
 8003eee:	18d2      	adds	r2, r2, r3
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	7013      	strb	r3, [r2, #0]
 8003ef4:	e00d      	b.n	8003f12 <UART_SetConfig+0x1ca>
 8003ef6:	2323      	movs	r3, #35	; 0x23
 8003ef8:	2258      	movs	r2, #88	; 0x58
 8003efa:	18ba      	adds	r2, r7, r2
 8003efc:	18d2      	adds	r2, r2, r3
 8003efe:	2310      	movs	r3, #16
 8003f00:	7013      	strb	r3, [r2, #0]
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	e005      	b.n	8003f12 <UART_SetConfig+0x1ca>
 8003f06:	2323      	movs	r3, #35	; 0x23
 8003f08:	2258      	movs	r2, #88	; 0x58
 8003f0a:	18ba      	adds	r2, r7, r2
 8003f0c:	18d2      	adds	r2, r2, r3
 8003f0e:	2310      	movs	r3, #16
 8003f10:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b5e      	ldr	r3, [pc, #376]	; (8004090 <UART_SetConfig+0x348>)
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <UART_SetConfig+0x1d8>
 8003f1c:	f000 fbe8 	bl	80046f0 <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f20:	2323      	movs	r3, #35	; 0x23
 8003f22:	2258      	movs	r2, #88	; 0x58
 8003f24:	4694      	mov	ip, r2
 8003f26:	44bc      	add	ip, r7
 8003f28:	4463      	add	r3, ip
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d100      	bne.n	8003f32 <UART_SetConfig+0x1ea>
 8003f30:	e05e      	b.n	8003ff0 <UART_SetConfig+0x2a8>
 8003f32:	dc02      	bgt.n	8003f3a <UART_SetConfig+0x1f2>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <UART_SetConfig+0x200>
 8003f38:	e174      	b.n	8004224 <UART_SetConfig+0x4dc>
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d100      	bne.n	8003f40 <UART_SetConfig+0x1f8>
 8003f3e:	e0c9      	b.n	80040d4 <UART_SetConfig+0x38c>
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d100      	bne.n	8003f46 <UART_SetConfig+0x1fe>
 8003f44:	e11a      	b.n	800417c <UART_SetConfig+0x434>
 8003f46:	e16d      	b.n	8004224 <UART_SetConfig+0x4dc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003f48:	f7fe fcbc 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d044      	beq.n	8003fe0 <UART_SetConfig+0x298>
 8003f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d03e      	beq.n	8003fdc <UART_SetConfig+0x294>
 8003f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d038      	beq.n	8003fd8 <UART_SetConfig+0x290>
 8003f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d032      	beq.n	8003fd4 <UART_SetConfig+0x28c>
 8003f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d02c      	beq.n	8003fd0 <UART_SetConfig+0x288>
 8003f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b05      	cmp	r3, #5
 8003f7c:	d026      	beq.n	8003fcc <UART_SetConfig+0x284>
 8003f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d020      	beq.n	8003fc8 <UART_SetConfig+0x280>
 8003f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2b07      	cmp	r3, #7
 8003f8c:	d01a      	beq.n	8003fc4 <UART_SetConfig+0x27c>
 8003f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d014      	beq.n	8003fc0 <UART_SetConfig+0x278>
 8003f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	2b09      	cmp	r3, #9
 8003f9c:	d00e      	beq.n	8003fbc <UART_SetConfig+0x274>
 8003f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2b0a      	cmp	r3, #10
 8003fa4:	d008      	beq.n	8003fb8 <UART_SetConfig+0x270>
 8003fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2b0b      	cmp	r3, #11
 8003fac:	d102      	bne.n	8003fb4 <UART_SetConfig+0x26c>
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	e016      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e014      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	e012      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fbc:	2340      	movs	r3, #64	; 0x40
 8003fbe:	e010      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	e00e      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	e00c      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fc8:	230c      	movs	r3, #12
 8003fca:	e00a      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fcc:	230a      	movs	r3, #10
 8003fce:	e008      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	e006      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fd4:	2306      	movs	r3, #6
 8003fd6:	e004      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fd8:	2304      	movs	r3, #4
 8003fda:	e002      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e000      	b.n	8003fe2 <UART_SetConfig+0x29a>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	0010      	movs	r0, r2
 8003fe6:	f7fc f88d 	bl	8000104 <__udivsi3>
 8003fea:	0003      	movs	r3, r0
 8003fec:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003fee:	e120      	b.n	8004232 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d043      	beq.n	8004080 <UART_SetConfig+0x338>
 8003ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d03d      	beq.n	800407c <UART_SetConfig+0x334>
 8004000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	2b02      	cmp	r3, #2
 8004006:	d037      	beq.n	8004078 <UART_SetConfig+0x330>
 8004008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	2b03      	cmp	r3, #3
 800400e:	d031      	beq.n	8004074 <UART_SetConfig+0x32c>
 8004010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	2b04      	cmp	r3, #4
 8004016:	d02b      	beq.n	8004070 <UART_SetConfig+0x328>
 8004018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	2b05      	cmp	r3, #5
 800401e:	d025      	beq.n	800406c <UART_SetConfig+0x324>
 8004020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	2b06      	cmp	r3, #6
 8004026:	d01f      	beq.n	8004068 <UART_SetConfig+0x320>
 8004028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	2b07      	cmp	r3, #7
 800402e:	d019      	beq.n	8004064 <UART_SetConfig+0x31c>
 8004030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	2b08      	cmp	r3, #8
 8004036:	d013      	beq.n	8004060 <UART_SetConfig+0x318>
 8004038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	2b09      	cmp	r3, #9
 800403e:	d00d      	beq.n	800405c <UART_SetConfig+0x314>
 8004040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b0a      	cmp	r3, #10
 8004046:	d007      	beq.n	8004058 <UART_SetConfig+0x310>
 8004048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	2b0b      	cmp	r3, #11
 800404e:	d101      	bne.n	8004054 <UART_SetConfig+0x30c>
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <UART_SetConfig+0x35c>)
 8004052:	e016      	b.n	8004082 <UART_SetConfig+0x33a>
 8004054:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <UART_SetConfig+0x360>)
 8004056:	e014      	b.n	8004082 <UART_SetConfig+0x33a>
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <UART_SetConfig+0x364>)
 800405a:	e012      	b.n	8004082 <UART_SetConfig+0x33a>
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <UART_SetConfig+0x368>)
 800405e:	e010      	b.n	8004082 <UART_SetConfig+0x33a>
 8004060:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <UART_SetConfig+0x36c>)
 8004062:	e00e      	b.n	8004082 <UART_SetConfig+0x33a>
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <UART_SetConfig+0x370>)
 8004066:	e00c      	b.n	8004082 <UART_SetConfig+0x33a>
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <UART_SetConfig+0x374>)
 800406a:	e00a      	b.n	8004082 <UART_SetConfig+0x33a>
 800406c:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <UART_SetConfig+0x378>)
 800406e:	e008      	b.n	8004082 <UART_SetConfig+0x33a>
 8004070:	4b14      	ldr	r3, [pc, #80]	; (80040c4 <UART_SetConfig+0x37c>)
 8004072:	e006      	b.n	8004082 <UART_SetConfig+0x33a>
 8004074:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <UART_SetConfig+0x380>)
 8004076:	e004      	b.n	8004082 <UART_SetConfig+0x33a>
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <UART_SetConfig+0x384>)
 800407a:	e002      	b.n	8004082 <UART_SetConfig+0x33a>
 800407c:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <UART_SetConfig+0x388>)
 800407e:	e000      	b.n	8004082 <UART_SetConfig+0x33a>
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <UART_SetConfig+0x360>)
 8004082:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004084:	e0d5      	b.n	8004232 <UART_SetConfig+0x4ea>
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	cfff69f3 	.word	0xcfff69f3
 800408c:	ffffcfff 	.word	0xffffcfff
 8004090:	40008000 	.word	0x40008000
 8004094:	11fff4ff 	.word	0x11fff4ff
 8004098:	40013800 	.word	0x40013800
 800409c:	40021000 	.word	0x40021000
 80040a0:	40004400 	.word	0x40004400
 80040a4:	0000f424 	.word	0x0000f424
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	0001e848 	.word	0x0001e848
 80040b0:	0003d090 	.word	0x0003d090
 80040b4:	0007a120 	.word	0x0007a120
 80040b8:	000f4240 	.word	0x000f4240
 80040bc:	00145855 	.word	0x00145855
 80040c0:	00186a00 	.word	0x00186a00
 80040c4:	001e8480 	.word	0x001e8480
 80040c8:	0028b0aa 	.word	0x0028b0aa
 80040cc:	003d0900 	.word	0x003d0900
 80040d0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80040d4:	f7fe fb6a 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 80040d8:	0002      	movs	r2, r0
 80040da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d044      	beq.n	800416c <UART_SetConfig+0x424>
 80040e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d03e      	beq.n	8004168 <UART_SetConfig+0x420>
 80040ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d038      	beq.n	8004164 <UART_SetConfig+0x41c>
 80040f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d032      	beq.n	8004160 <UART_SetConfig+0x418>
 80040fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d02c      	beq.n	800415c <UART_SetConfig+0x414>
 8004102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	2b05      	cmp	r3, #5
 8004108:	d026      	beq.n	8004158 <UART_SetConfig+0x410>
 800410a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b06      	cmp	r3, #6
 8004110:	d020      	beq.n	8004154 <UART_SetConfig+0x40c>
 8004112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b07      	cmp	r3, #7
 8004118:	d01a      	beq.n	8004150 <UART_SetConfig+0x408>
 800411a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	2b08      	cmp	r3, #8
 8004120:	d014      	beq.n	800414c <UART_SetConfig+0x404>
 8004122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	2b09      	cmp	r3, #9
 8004128:	d00e      	beq.n	8004148 <UART_SetConfig+0x400>
 800412a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	2b0a      	cmp	r3, #10
 8004130:	d008      	beq.n	8004144 <UART_SetConfig+0x3fc>
 8004132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	2b0b      	cmp	r3, #11
 8004138:	d102      	bne.n	8004140 <UART_SetConfig+0x3f8>
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	e016      	b.n	800416e <UART_SetConfig+0x426>
 8004140:	2301      	movs	r3, #1
 8004142:	e014      	b.n	800416e <UART_SetConfig+0x426>
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	e012      	b.n	800416e <UART_SetConfig+0x426>
 8004148:	2340      	movs	r3, #64	; 0x40
 800414a:	e010      	b.n	800416e <UART_SetConfig+0x426>
 800414c:	2320      	movs	r3, #32
 800414e:	e00e      	b.n	800416e <UART_SetConfig+0x426>
 8004150:	2310      	movs	r3, #16
 8004152:	e00c      	b.n	800416e <UART_SetConfig+0x426>
 8004154:	230c      	movs	r3, #12
 8004156:	e00a      	b.n	800416e <UART_SetConfig+0x426>
 8004158:	230a      	movs	r3, #10
 800415a:	e008      	b.n	800416e <UART_SetConfig+0x426>
 800415c:	2308      	movs	r3, #8
 800415e:	e006      	b.n	800416e <UART_SetConfig+0x426>
 8004160:	2306      	movs	r3, #6
 8004162:	e004      	b.n	800416e <UART_SetConfig+0x426>
 8004164:	2304      	movs	r3, #4
 8004166:	e002      	b.n	800416e <UART_SetConfig+0x426>
 8004168:	2302      	movs	r3, #2
 800416a:	e000      	b.n	800416e <UART_SetConfig+0x426>
 800416c:	2301      	movs	r3, #1
 800416e:	0019      	movs	r1, r3
 8004170:	0010      	movs	r0, r2
 8004172:	f7fb ffc7 	bl	8000104 <__udivsi3>
 8004176:	0003      	movs	r3, r0
 8004178:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800417a:	e05a      	b.n	8004232 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800417c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	2b00      	cmp	r3, #0
 8004182:	d04b      	beq.n	800421c <UART_SetConfig+0x4d4>
 8004184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	2b01      	cmp	r3, #1
 800418a:	d044      	beq.n	8004216 <UART_SetConfig+0x4ce>
 800418c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	2b02      	cmp	r3, #2
 8004192:	d03d      	beq.n	8004210 <UART_SetConfig+0x4c8>
 8004194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	2b03      	cmp	r3, #3
 800419a:	d037      	beq.n	800420c <UART_SetConfig+0x4c4>
 800419c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d030      	beq.n	8004206 <UART_SetConfig+0x4be>
 80041a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	d02a      	beq.n	8004202 <UART_SetConfig+0x4ba>
 80041ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d024      	beq.n	80041fe <UART_SetConfig+0x4b6>
 80041b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2b07      	cmp	r3, #7
 80041ba:	d01d      	beq.n	80041f8 <UART_SetConfig+0x4b0>
 80041bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d016      	beq.n	80041f2 <UART_SetConfig+0x4aa>
 80041c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	d00f      	beq.n	80041ec <UART_SetConfig+0x4a4>
 80041cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	2b0a      	cmp	r3, #10
 80041d2:	d008      	beq.n	80041e6 <UART_SetConfig+0x49e>
 80041d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	2b0b      	cmp	r3, #11
 80041da:	d101      	bne.n	80041e0 <UART_SetConfig+0x498>
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	e01f      	b.n	8004220 <UART_SetConfig+0x4d8>
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	e01c      	b.n	8004220 <UART_SetConfig+0x4d8>
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	e019      	b.n	8004220 <UART_SetConfig+0x4d8>
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	e016      	b.n	8004220 <UART_SetConfig+0x4d8>
 80041f2:	2380      	movs	r3, #128	; 0x80
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	e013      	b.n	8004220 <UART_SetConfig+0x4d8>
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	e010      	b.n	8004220 <UART_SetConfig+0x4d8>
 80041fe:	4bbf      	ldr	r3, [pc, #764]	; (80044fc <UART_SetConfig+0x7b4>)
 8004200:	e00e      	b.n	8004220 <UART_SetConfig+0x4d8>
 8004202:	4bbf      	ldr	r3, [pc, #764]	; (8004500 <UART_SetConfig+0x7b8>)
 8004204:	e00c      	b.n	8004220 <UART_SetConfig+0x4d8>
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	015b      	lsls	r3, r3, #5
 800420a:	e009      	b.n	8004220 <UART_SetConfig+0x4d8>
 800420c:	4bbd      	ldr	r3, [pc, #756]	; (8004504 <UART_SetConfig+0x7bc>)
 800420e:	e007      	b.n	8004220 <UART_SetConfig+0x4d8>
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	019b      	lsls	r3, r3, #6
 8004214:	e004      	b.n	8004220 <UART_SetConfig+0x4d8>
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	01db      	lsls	r3, r3, #7
 800421a:	e001      	b.n	8004220 <UART_SetConfig+0x4d8>
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004222:	e006      	b.n	8004232 <UART_SetConfig+0x4ea>
      default:
        ret = HAL_ERROR;
 8004224:	231b      	movs	r3, #27
 8004226:	2258      	movs	r2, #88	; 0x58
 8004228:	18ba      	adds	r2, r7, r2
 800422a:	18d2      	adds	r2, r2, r3
 800422c:	2301      	movs	r3, #1
 800422e:	7013      	strb	r3, [r2, #0]
        break;
 8004230:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <UART_SetConfig+0x4f4>
 8004238:	f000 fe14 	bl	8004e64 <UART_SetConfig+0x111c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800423c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	0013      	movs	r3, r2
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	189a      	adds	r2, r3, r2
 8004246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004248:	4293      	cmp	r3, r2
 800424a:	d305      	bcc.n	8004258 <UART_SetConfig+0x510>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800424c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004254:	4293      	cmp	r3, r2
 8004256:	d908      	bls.n	800426a <UART_SetConfig+0x522>
      {
        ret = HAL_ERROR;
 8004258:	231b      	movs	r3, #27
 800425a:	2258      	movs	r2, #88	; 0x58
 800425c:	4694      	mov	ip, r2
 800425e:	44bc      	add	ip, r7
 8004260:	4463      	add	r3, ip
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	f000 fdfd 	bl	8004e64 <UART_SetConfig+0x111c>
      }
      else
      {
        switch (clocksource)
 800426a:	2323      	movs	r3, #35	; 0x23
 800426c:	2258      	movs	r2, #88	; 0x58
 800426e:	4694      	mov	ip, r2
 8004270:	44bc      	add	ip, r7
 8004272:	4463      	add	r3, ip
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d100      	bne.n	800427c <UART_SetConfig+0x534>
 800427a:	e08c      	b.n	8004396 <UART_SetConfig+0x64e>
 800427c:	dc02      	bgt.n	8004284 <UART_SetConfig+0x53c>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <UART_SetConfig+0x54a>
 8004282:	e216      	b.n	80046b2 <UART_SetConfig+0x96a>
 8004284:	2b04      	cmp	r3, #4
 8004286:	d100      	bne.n	800428a <UART_SetConfig+0x542>
 8004288:	e0f2      	b.n	8004470 <UART_SetConfig+0x728>
 800428a:	2b08      	cmp	r3, #8
 800428c:	d100      	bne.n	8004290 <UART_SetConfig+0x548>
 800428e:	e199      	b.n	80045c4 <UART_SetConfig+0x87c>
 8004290:	e20f      	b.n	80046b2 <UART_SetConfig+0x96a>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004292:	f7fe fb17 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8004296:	0003      	movs	r3, r0
 8004298:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800429a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800429c:	64bb      	str	r3, [r7, #72]	; 0x48
 800429e:	2300      	movs	r3, #0
 80042a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d050      	beq.n	800434c <UART_SetConfig+0x604>
 80042aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d049      	beq.n	8004346 <UART_SetConfig+0x5fe>
 80042b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d042      	beq.n	8004340 <UART_SetConfig+0x5f8>
 80042ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d03b      	beq.n	800433a <UART_SetConfig+0x5f2>
 80042c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d034      	beq.n	8004334 <UART_SetConfig+0x5ec>
 80042ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	d02d      	beq.n	800432e <UART_SetConfig+0x5e6>
 80042d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	2b06      	cmp	r3, #6
 80042d8:	d026      	beq.n	8004328 <UART_SetConfig+0x5e0>
 80042da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b07      	cmp	r3, #7
 80042e0:	d01f      	beq.n	8004322 <UART_SetConfig+0x5da>
 80042e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d018      	beq.n	800431c <UART_SetConfig+0x5d4>
 80042ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b09      	cmp	r3, #9
 80042f0:	d011      	beq.n	8004316 <UART_SetConfig+0x5ce>
 80042f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	2b0a      	cmp	r3, #10
 80042f8:	d00a      	beq.n	8004310 <UART_SetConfig+0x5c8>
 80042fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	2b0b      	cmp	r3, #11
 8004300:	d103      	bne.n	800430a <UART_SetConfig+0x5c2>
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	2400      	movs	r4, #0
 8004308:	e022      	b.n	8004350 <UART_SetConfig+0x608>
 800430a:	2301      	movs	r3, #1
 800430c:	2400      	movs	r4, #0
 800430e:	e01f      	b.n	8004350 <UART_SetConfig+0x608>
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	2400      	movs	r4, #0
 8004314:	e01c      	b.n	8004350 <UART_SetConfig+0x608>
 8004316:	2340      	movs	r3, #64	; 0x40
 8004318:	2400      	movs	r4, #0
 800431a:	e019      	b.n	8004350 <UART_SetConfig+0x608>
 800431c:	2320      	movs	r3, #32
 800431e:	2400      	movs	r4, #0
 8004320:	e016      	b.n	8004350 <UART_SetConfig+0x608>
 8004322:	2310      	movs	r3, #16
 8004324:	2400      	movs	r4, #0
 8004326:	e013      	b.n	8004350 <UART_SetConfig+0x608>
 8004328:	230c      	movs	r3, #12
 800432a:	2400      	movs	r4, #0
 800432c:	e010      	b.n	8004350 <UART_SetConfig+0x608>
 800432e:	230a      	movs	r3, #10
 8004330:	2400      	movs	r4, #0
 8004332:	e00d      	b.n	8004350 <UART_SetConfig+0x608>
 8004334:	2308      	movs	r3, #8
 8004336:	2400      	movs	r4, #0
 8004338:	e00a      	b.n	8004350 <UART_SetConfig+0x608>
 800433a:	2306      	movs	r3, #6
 800433c:	2400      	movs	r4, #0
 800433e:	e007      	b.n	8004350 <UART_SetConfig+0x608>
 8004340:	2304      	movs	r3, #4
 8004342:	2400      	movs	r4, #0
 8004344:	e004      	b.n	8004350 <UART_SetConfig+0x608>
 8004346:	2302      	movs	r3, #2
 8004348:	2400      	movs	r4, #0
 800434a:	e001      	b.n	8004350 <UART_SetConfig+0x608>
 800434c:	2301      	movs	r3, #1
 800434e:	2400      	movs	r4, #0
 8004350:	001a      	movs	r2, r3
 8004352:	0023      	movs	r3, r4
 8004354:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004356:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004358:	f7fc f84a 	bl	80003f0 <__aeabi_uldivmod>
 800435c:	0003      	movs	r3, r0
 800435e:	000c      	movs	r4, r1
 8004360:	0e1a      	lsrs	r2, r3, #24
 8004362:	0226      	lsls	r6, r4, #8
 8004364:	4316      	orrs	r6, r2
 8004366:	021d      	lsls	r5, r3, #8
 8004368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	643b      	str	r3, [r7, #64]	; 0x40
 8004370:	2300      	movs	r3, #0
 8004372:	647b      	str	r3, [r7, #68]	; 0x44
 8004374:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004376:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004378:	1940      	adds	r0, r0, r5
 800437a:	4171      	adcs	r1, r6
 800437c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	63bb      	str	r3, [r7, #56]	; 0x38
 8004382:	2300      	movs	r3, #0
 8004384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438a:	f7fc f831 	bl	80003f0 <__aeabi_uldivmod>
 800438e:	0003      	movs	r3, r0
 8004390:	000c      	movs	r4, r1
 8004392:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004394:	e195      	b.n	80046c2 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d04f      	beq.n	800443e <UART_SetConfig+0x6f6>
 800439e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d048      	beq.n	8004438 <UART_SetConfig+0x6f0>
 80043a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d041      	beq.n	8004432 <UART_SetConfig+0x6ea>
 80043ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d03a      	beq.n	800442c <UART_SetConfig+0x6e4>
 80043b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d033      	beq.n	8004426 <UART_SetConfig+0x6de>
 80043be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	d02c      	beq.n	8004420 <UART_SetConfig+0x6d8>
 80043c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d025      	beq.n	800441a <UART_SetConfig+0x6d2>
 80043ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	2b07      	cmp	r3, #7
 80043d4:	d01e      	beq.n	8004414 <UART_SetConfig+0x6cc>
 80043d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d017      	beq.n	800440e <UART_SetConfig+0x6c6>
 80043de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	2b09      	cmp	r3, #9
 80043e4:	d010      	beq.n	8004408 <UART_SetConfig+0x6c0>
 80043e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2b0a      	cmp	r3, #10
 80043ec:	d009      	beq.n	8004402 <UART_SetConfig+0x6ba>
 80043ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b0b      	cmp	r3, #11
 80043f4:	d102      	bne.n	80043fc <UART_SetConfig+0x6b4>
 80043f6:	4b44      	ldr	r3, [pc, #272]	; (8004508 <UART_SetConfig+0x7c0>)
 80043f8:	2400      	movs	r4, #0
 80043fa:	e022      	b.n	8004442 <UART_SetConfig+0x6fa>
 80043fc:	4b43      	ldr	r3, [pc, #268]	; (800450c <UART_SetConfig+0x7c4>)
 80043fe:	2400      	movs	r4, #0
 8004400:	e01f      	b.n	8004442 <UART_SetConfig+0x6fa>
 8004402:	4b43      	ldr	r3, [pc, #268]	; (8004510 <UART_SetConfig+0x7c8>)
 8004404:	2400      	movs	r4, #0
 8004406:	e01c      	b.n	8004442 <UART_SetConfig+0x6fa>
 8004408:	4b42      	ldr	r3, [pc, #264]	; (8004514 <UART_SetConfig+0x7cc>)
 800440a:	2400      	movs	r4, #0
 800440c:	e019      	b.n	8004442 <UART_SetConfig+0x6fa>
 800440e:	4b42      	ldr	r3, [pc, #264]	; (8004518 <UART_SetConfig+0x7d0>)
 8004410:	2400      	movs	r4, #0
 8004412:	e016      	b.n	8004442 <UART_SetConfig+0x6fa>
 8004414:	4b41      	ldr	r3, [pc, #260]	; (800451c <UART_SetConfig+0x7d4>)
 8004416:	2400      	movs	r4, #0
 8004418:	e013      	b.n	8004442 <UART_SetConfig+0x6fa>
 800441a:	4b41      	ldr	r3, [pc, #260]	; (8004520 <UART_SetConfig+0x7d8>)
 800441c:	2400      	movs	r4, #0
 800441e:	e010      	b.n	8004442 <UART_SetConfig+0x6fa>
 8004420:	4b40      	ldr	r3, [pc, #256]	; (8004524 <UART_SetConfig+0x7dc>)
 8004422:	2400      	movs	r4, #0
 8004424:	e00d      	b.n	8004442 <UART_SetConfig+0x6fa>
 8004426:	4b40      	ldr	r3, [pc, #256]	; (8004528 <UART_SetConfig+0x7e0>)
 8004428:	2400      	movs	r4, #0
 800442a:	e00a      	b.n	8004442 <UART_SetConfig+0x6fa>
 800442c:	4b3f      	ldr	r3, [pc, #252]	; (800452c <UART_SetConfig+0x7e4>)
 800442e:	2400      	movs	r4, #0
 8004430:	e007      	b.n	8004442 <UART_SetConfig+0x6fa>
 8004432:	4b3f      	ldr	r3, [pc, #252]	; (8004530 <UART_SetConfig+0x7e8>)
 8004434:	2400      	movs	r4, #0
 8004436:	e004      	b.n	8004442 <UART_SetConfig+0x6fa>
 8004438:	4b3e      	ldr	r3, [pc, #248]	; (8004534 <UART_SetConfig+0x7ec>)
 800443a:	2400      	movs	r4, #0
 800443c:	e001      	b.n	8004442 <UART_SetConfig+0x6fa>
 800443e:	4b33      	ldr	r3, [pc, #204]	; (800450c <UART_SetConfig+0x7c4>)
 8004440:	2400      	movs	r4, #0
 8004442:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004444:	6852      	ldr	r2, [r2, #4]
 8004446:	0852      	lsrs	r2, r2, #1
 8004448:	633a      	str	r2, [r7, #48]	; 0x30
 800444a:	2200      	movs	r2, #0
 800444c:	637a      	str	r2, [r7, #52]	; 0x34
 800444e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004450:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004452:	18c0      	adds	r0, r0, r3
 8004454:	4161      	adcs	r1, r4
 8004456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
 800445c:	2300      	movs	r3, #0
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	f7fb ffc4 	bl	80003f0 <__aeabi_uldivmod>
 8004468:	0003      	movs	r3, r0
 800446a:	000c      	movs	r4, r1
 800446c:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800446e:	e128      	b.n	80046c2 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004470:	f7fe f99c 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8004474:	0003      	movs	r3, r0
 8004476:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	2300      	movs	r3, #0
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
 8004480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	2b00      	cmp	r3, #0
 8004486:	d100      	bne.n	800448a <UART_SetConfig+0x742>
 8004488:	e071      	b.n	800456e <UART_SetConfig+0x826>
 800448a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2b01      	cmp	r3, #1
 8004490:	d100      	bne.n	8004494 <UART_SetConfig+0x74c>
 8004492:	e069      	b.n	8004568 <UART_SetConfig+0x820>
 8004494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b02      	cmp	r3, #2
 800449a:	d100      	bne.n	800449e <UART_SetConfig+0x756>
 800449c:	e061      	b.n	8004562 <UART_SetConfig+0x81a>
 800449e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d05a      	beq.n	800455c <UART_SetConfig+0x814>
 80044a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d053      	beq.n	8004556 <UART_SetConfig+0x80e>
 80044ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d04c      	beq.n	8004550 <UART_SetConfig+0x808>
 80044b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b06      	cmp	r3, #6
 80044bc:	d045      	beq.n	800454a <UART_SetConfig+0x802>
 80044be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b07      	cmp	r3, #7
 80044c4:	d03e      	beq.n	8004544 <UART_SetConfig+0x7fc>
 80044c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d037      	beq.n	800453e <UART_SetConfig+0x7f6>
 80044ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	2b09      	cmp	r3, #9
 80044d4:	d030      	beq.n	8004538 <UART_SetConfig+0x7f0>
 80044d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	2b0a      	cmp	r3, #10
 80044dc:	d00a      	beq.n	80044f4 <UART_SetConfig+0x7ac>
 80044de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	2b0b      	cmp	r3, #11
 80044e4:	d103      	bne.n	80044ee <UART_SetConfig+0x7a6>
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	2400      	movs	r4, #0
 80044ec:	e041      	b.n	8004572 <UART_SetConfig+0x82a>
 80044ee:	2301      	movs	r3, #1
 80044f0:	2400      	movs	r4, #0
 80044f2:	e03e      	b.n	8004572 <UART_SetConfig+0x82a>
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	2400      	movs	r4, #0
 80044f8:	e03b      	b.n	8004572 <UART_SetConfig+0x82a>
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	00000aaa 	.word	0x00000aaa
 8004500:	00000ccc 	.word	0x00000ccc
 8004504:	00001555 	.word	0x00001555
 8004508:	00f42400 	.word	0x00f42400
 800450c:	f4240000 	.word	0xf4240000
 8004510:	01e84800 	.word	0x01e84800
 8004514:	03d09000 	.word	0x03d09000
 8004518:	07a12000 	.word	0x07a12000
 800451c:	0f424000 	.word	0x0f424000
 8004520:	14585500 	.word	0x14585500
 8004524:	186a0000 	.word	0x186a0000
 8004528:	1e848000 	.word	0x1e848000
 800452c:	28b0aa00 	.word	0x28b0aa00
 8004530:	3d090000 	.word	0x3d090000
 8004534:	7a120000 	.word	0x7a120000
 8004538:	2340      	movs	r3, #64	; 0x40
 800453a:	2400      	movs	r4, #0
 800453c:	e019      	b.n	8004572 <UART_SetConfig+0x82a>
 800453e:	2320      	movs	r3, #32
 8004540:	2400      	movs	r4, #0
 8004542:	e016      	b.n	8004572 <UART_SetConfig+0x82a>
 8004544:	2310      	movs	r3, #16
 8004546:	2400      	movs	r4, #0
 8004548:	e013      	b.n	8004572 <UART_SetConfig+0x82a>
 800454a:	230c      	movs	r3, #12
 800454c:	2400      	movs	r4, #0
 800454e:	e010      	b.n	8004572 <UART_SetConfig+0x82a>
 8004550:	230a      	movs	r3, #10
 8004552:	2400      	movs	r4, #0
 8004554:	e00d      	b.n	8004572 <UART_SetConfig+0x82a>
 8004556:	2308      	movs	r3, #8
 8004558:	2400      	movs	r4, #0
 800455a:	e00a      	b.n	8004572 <UART_SetConfig+0x82a>
 800455c:	2306      	movs	r3, #6
 800455e:	2400      	movs	r4, #0
 8004560:	e007      	b.n	8004572 <UART_SetConfig+0x82a>
 8004562:	2304      	movs	r3, #4
 8004564:	2400      	movs	r4, #0
 8004566:	e004      	b.n	8004572 <UART_SetConfig+0x82a>
 8004568:	2302      	movs	r3, #2
 800456a:	2400      	movs	r4, #0
 800456c:	e001      	b.n	8004572 <UART_SetConfig+0x82a>
 800456e:	2301      	movs	r3, #1
 8004570:	2400      	movs	r4, #0
 8004572:	001a      	movs	r2, r3
 8004574:	0023      	movs	r3, r4
 8004576:	6a38      	ldr	r0, [r7, #32]
 8004578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800457a:	f7fb ff39 	bl	80003f0 <__aeabi_uldivmod>
 800457e:	0003      	movs	r3, r0
 8004580:	000c      	movs	r4, r1
 8004582:	0e1a      	lsrs	r2, r3, #24
 8004584:	0221      	lsls	r1, r4, #8
 8004586:	6579      	str	r1, [r7, #84]	; 0x54
 8004588:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800458a:	4311      	orrs	r1, r2
 800458c:	6579      	str	r1, [r7, #84]	; 0x54
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	653b      	str	r3, [r7, #80]	; 0x50
 8004592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80045a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	69fc      	ldr	r4, [r7, #28]
 80045a6:	18c0      	adds	r0, r0, r3
 80045a8:	4161      	adcs	r1, r4
 80045aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f7fb ff1a 	bl	80003f0 <__aeabi_uldivmod>
 80045bc:	0003      	movs	r3, r0
 80045be:	000c      	movs	r4, r1
 80045c0:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80045c2:	e07e      	b.n	80046c2 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d058      	beq.n	800467e <UART_SetConfig+0x936>
 80045cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d050      	beq.n	8004676 <UART_SetConfig+0x92e>
 80045d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d048      	beq.n	800466e <UART_SetConfig+0x926>
 80045dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d041      	beq.n	8004668 <UART_SetConfig+0x920>
 80045e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d039      	beq.n	8004660 <UART_SetConfig+0x918>
 80045ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	2b05      	cmp	r3, #5
 80045f2:	d032      	beq.n	800465a <UART_SetConfig+0x912>
 80045f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	2b06      	cmp	r3, #6
 80045fa:	d02b      	beq.n	8004654 <UART_SetConfig+0x90c>
 80045fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	2b07      	cmp	r3, #7
 8004602:	d023      	beq.n	800464c <UART_SetConfig+0x904>
 8004604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	2b08      	cmp	r3, #8
 800460a:	d01b      	beq.n	8004644 <UART_SetConfig+0x8fc>
 800460c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	2b09      	cmp	r3, #9
 8004612:	d013      	beq.n	800463c <UART_SetConfig+0x8f4>
 8004614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	2b0a      	cmp	r3, #10
 800461a:	d00b      	beq.n	8004634 <UART_SetConfig+0x8ec>
 800461c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2b0b      	cmp	r3, #11
 8004622:	d103      	bne.n	800462c <UART_SetConfig+0x8e4>
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	2400      	movs	r4, #0
 800462a:	e02b      	b.n	8004684 <UART_SetConfig+0x93c>
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	2400      	movs	r4, #0
 8004632:	e027      	b.n	8004684 <UART_SetConfig+0x93c>
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	025b      	lsls	r3, r3, #9
 8004638:	2400      	movs	r4, #0
 800463a:	e023      	b.n	8004684 <UART_SetConfig+0x93c>
 800463c:	2380      	movs	r3, #128	; 0x80
 800463e:	029b      	lsls	r3, r3, #10
 8004640:	2400      	movs	r4, #0
 8004642:	e01f      	b.n	8004684 <UART_SetConfig+0x93c>
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	02db      	lsls	r3, r3, #11
 8004648:	2400      	movs	r4, #0
 800464a:	e01b      	b.n	8004684 <UART_SetConfig+0x93c>
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	031b      	lsls	r3, r3, #12
 8004650:	2400      	movs	r4, #0
 8004652:	e017      	b.n	8004684 <UART_SetConfig+0x93c>
 8004654:	4bb7      	ldr	r3, [pc, #732]	; (8004934 <UART_SetConfig+0xbec>)
 8004656:	2400      	movs	r4, #0
 8004658:	e014      	b.n	8004684 <UART_SetConfig+0x93c>
 800465a:	4bb7      	ldr	r3, [pc, #732]	; (8004938 <UART_SetConfig+0xbf0>)
 800465c:	2400      	movs	r4, #0
 800465e:	e011      	b.n	8004684 <UART_SetConfig+0x93c>
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	035b      	lsls	r3, r3, #13
 8004664:	2400      	movs	r4, #0
 8004666:	e00d      	b.n	8004684 <UART_SetConfig+0x93c>
 8004668:	4bb4      	ldr	r3, [pc, #720]	; (800493c <UART_SetConfig+0xbf4>)
 800466a:	2400      	movs	r4, #0
 800466c:	e00a      	b.n	8004684 <UART_SetConfig+0x93c>
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	039b      	lsls	r3, r3, #14
 8004672:	2400      	movs	r4, #0
 8004674:	e006      	b.n	8004684 <UART_SetConfig+0x93c>
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	03db      	lsls	r3, r3, #15
 800467a:	2400      	movs	r4, #0
 800467c:	e002      	b.n	8004684 <UART_SetConfig+0x93c>
 800467e:	2380      	movs	r3, #128	; 0x80
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	2400      	movs	r4, #0
 8004684:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004686:	6852      	ldr	r2, [r2, #4]
 8004688:	0852      	lsrs	r2, r2, #1
 800468a:	60ba      	str	r2, [r7, #8]
 800468c:	2200      	movs	r2, #0
 800468e:	60fa      	str	r2, [r7, #12]
 8004690:	68b8      	ldr	r0, [r7, #8]
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	18c0      	adds	r0, r0, r3
 8004696:	4161      	adcs	r1, r4
 8004698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	2300      	movs	r3, #0
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f7fb fea3 	bl	80003f0 <__aeabi_uldivmod>
 80046aa:	0003      	movs	r3, r0
 80046ac:	000c      	movs	r4, r1
 80046ae:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80046b0:	e007      	b.n	80046c2 <UART_SetConfig+0x97a>
          default:
            ret = HAL_ERROR;
 80046b2:	231b      	movs	r3, #27
 80046b4:	2258      	movs	r2, #88	; 0x58
 80046b6:	4694      	mov	ip, r2
 80046b8:	44bc      	add	ip, r7
 80046ba:	4463      	add	r3, ip
 80046bc:	2201      	movs	r2, #1
 80046be:	701a      	strb	r2, [r3, #0]
            break;
 80046c0:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c4:	4a9e      	ldr	r2, [pc, #632]	; (8004940 <UART_SetConfig+0xbf8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d909      	bls.n	80046de <UART_SetConfig+0x996>
 80046ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046cc:	4a9d      	ldr	r2, [pc, #628]	; (8004944 <UART_SetConfig+0xbfc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d805      	bhi.n	80046de <UART_SetConfig+0x996>
        {
          huart->Instance->BRR = usartdiv;
 80046d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	f000 fbc3 	bl	8004e64 <UART_SetConfig+0x111c>
        }
        else
        {
          ret = HAL_ERROR;
 80046de:	231b      	movs	r3, #27
 80046e0:	2258      	movs	r2, #88	; 0x58
 80046e2:	4694      	mov	ip, r2
 80046e4:	44bc      	add	ip, r7
 80046e6:	4463      	add	r3, ip
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	f000 fbba 	bl	8004e64 <UART_SetConfig+0x111c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d000      	beq.n	80046fe <UART_SetConfig+0x9b6>
 80046fc:	e1e6      	b.n	8004acc <UART_SetConfig+0xd84>
  {
    switch (clocksource)
 80046fe:	2323      	movs	r3, #35	; 0x23
 8004700:	2258      	movs	r2, #88	; 0x58
 8004702:	4694      	mov	ip, r2
 8004704:	44bc      	add	ip, r7
 8004706:	4463      	add	r3, ip
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d100      	bne.n	8004710 <UART_SetConfig+0x9c8>
 800470e:	e06c      	b.n	80047ea <UART_SetConfig+0xaa2>
 8004710:	dc02      	bgt.n	8004718 <UART_SetConfig+0x9d0>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <UART_SetConfig+0x9de>
 8004716:	e1a5      	b.n	8004a64 <UART_SetConfig+0xd1c>
 8004718:	2b04      	cmp	r3, #4
 800471a:	d100      	bne.n	800471e <UART_SetConfig+0x9d6>
 800471c:	e0bc      	b.n	8004898 <UART_SetConfig+0xb50>
 800471e:	2b08      	cmp	r3, #8
 8004720:	d100      	bne.n	8004724 <UART_SetConfig+0x9dc>
 8004722:	e13e      	b.n	80049a2 <UART_SetConfig+0xc5a>
 8004724:	e19e      	b.n	8004a64 <UART_SetConfig+0xd1c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004726:	f7fe f8cd 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 800472a:	0003      	movs	r3, r0
 800472c:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800472e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d044      	beq.n	80047c0 <UART_SetConfig+0xa78>
 8004736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2b01      	cmp	r3, #1
 800473c:	d03e      	beq.n	80047bc <UART_SetConfig+0xa74>
 800473e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2b02      	cmp	r3, #2
 8004744:	d038      	beq.n	80047b8 <UART_SetConfig+0xa70>
 8004746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	2b03      	cmp	r3, #3
 800474c:	d032      	beq.n	80047b4 <UART_SetConfig+0xa6c>
 800474e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	2b04      	cmp	r3, #4
 8004754:	d02c      	beq.n	80047b0 <UART_SetConfig+0xa68>
 8004756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	2b05      	cmp	r3, #5
 800475c:	d026      	beq.n	80047ac <UART_SetConfig+0xa64>
 800475e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2b06      	cmp	r3, #6
 8004764:	d020      	beq.n	80047a8 <UART_SetConfig+0xa60>
 8004766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	2b07      	cmp	r3, #7
 800476c:	d01a      	beq.n	80047a4 <UART_SetConfig+0xa5c>
 800476e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b08      	cmp	r3, #8
 8004774:	d014      	beq.n	80047a0 <UART_SetConfig+0xa58>
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2b09      	cmp	r3, #9
 800477c:	d00e      	beq.n	800479c <UART_SetConfig+0xa54>
 800477e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	2b0a      	cmp	r3, #10
 8004784:	d008      	beq.n	8004798 <UART_SetConfig+0xa50>
 8004786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	2b0b      	cmp	r3, #11
 800478c:	d102      	bne.n	8004794 <UART_SetConfig+0xa4c>
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	e016      	b.n	80047c2 <UART_SetConfig+0xa7a>
 8004794:	2301      	movs	r3, #1
 8004796:	e014      	b.n	80047c2 <UART_SetConfig+0xa7a>
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	e012      	b.n	80047c2 <UART_SetConfig+0xa7a>
 800479c:	2340      	movs	r3, #64	; 0x40
 800479e:	e010      	b.n	80047c2 <UART_SetConfig+0xa7a>
 80047a0:	2320      	movs	r3, #32
 80047a2:	e00e      	b.n	80047c2 <UART_SetConfig+0xa7a>
 80047a4:	2310      	movs	r3, #16
 80047a6:	e00c      	b.n	80047c2 <UART_SetConfig+0xa7a>
 80047a8:	230c      	movs	r3, #12
 80047aa:	e00a      	b.n	80047c2 <UART_SetConfig+0xa7a>
 80047ac:	230a      	movs	r3, #10
 80047ae:	e008      	b.n	80047c2 <UART_SetConfig+0xa7a>
 80047b0:	2308      	movs	r3, #8
 80047b2:	e006      	b.n	80047c2 <UART_SetConfig+0xa7a>
 80047b4:	2306      	movs	r3, #6
 80047b6:	e004      	b.n	80047c2 <UART_SetConfig+0xa7a>
 80047b8:	2304      	movs	r3, #4
 80047ba:	e002      	b.n	80047c2 <UART_SetConfig+0xa7a>
 80047bc:	2302      	movs	r3, #2
 80047be:	e000      	b.n	80047c2 <UART_SetConfig+0xa7a>
 80047c0:	2301      	movs	r3, #1
 80047c2:	0019      	movs	r1, r3
 80047c4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80047c6:	f7fb fc9d 	bl	8000104 <__udivsi3>
 80047ca:	0003      	movs	r3, r0
 80047cc:	005a      	lsls	r2, r3, #1
 80047ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	18d2      	adds	r2, r2, r3
 80047d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	0019      	movs	r1, r3
 80047dc:	0010      	movs	r0, r2
 80047de:	f7fb fc91 	bl	8000104 <__udivsi3>
 80047e2:	0003      	movs	r3, r0
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80047e8:	e144      	b.n	8004a74 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d043      	beq.n	800487a <UART_SetConfig+0xb32>
 80047f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d03d      	beq.n	8004876 <UART_SetConfig+0xb2e>
 80047fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d037      	beq.n	8004872 <UART_SetConfig+0xb2a>
 8004802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b03      	cmp	r3, #3
 8004808:	d031      	beq.n	800486e <UART_SetConfig+0xb26>
 800480a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b04      	cmp	r3, #4
 8004810:	d02b      	beq.n	800486a <UART_SetConfig+0xb22>
 8004812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b05      	cmp	r3, #5
 8004818:	d025      	beq.n	8004866 <UART_SetConfig+0xb1e>
 800481a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2b06      	cmp	r3, #6
 8004820:	d01f      	beq.n	8004862 <UART_SetConfig+0xb1a>
 8004822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	2b07      	cmp	r3, #7
 8004828:	d019      	beq.n	800485e <UART_SetConfig+0xb16>
 800482a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	2b08      	cmp	r3, #8
 8004830:	d013      	beq.n	800485a <UART_SetConfig+0xb12>
 8004832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	2b09      	cmp	r3, #9
 8004838:	d00d      	beq.n	8004856 <UART_SetConfig+0xb0e>
 800483a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	2b0a      	cmp	r3, #10
 8004840:	d007      	beq.n	8004852 <UART_SetConfig+0xb0a>
 8004842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	2b0b      	cmp	r3, #11
 8004848:	d101      	bne.n	800484e <UART_SetConfig+0xb06>
 800484a:	4b3f      	ldr	r3, [pc, #252]	; (8004948 <UART_SetConfig+0xc00>)
 800484c:	e016      	b.n	800487c <UART_SetConfig+0xb34>
 800484e:	4b3f      	ldr	r3, [pc, #252]	; (800494c <UART_SetConfig+0xc04>)
 8004850:	e014      	b.n	800487c <UART_SetConfig+0xb34>
 8004852:	4b3f      	ldr	r3, [pc, #252]	; (8004950 <UART_SetConfig+0xc08>)
 8004854:	e012      	b.n	800487c <UART_SetConfig+0xb34>
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <UART_SetConfig+0xc0c>)
 8004858:	e010      	b.n	800487c <UART_SetConfig+0xb34>
 800485a:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <UART_SetConfig+0xc10>)
 800485c:	e00e      	b.n	800487c <UART_SetConfig+0xb34>
 800485e:	4b3f      	ldr	r3, [pc, #252]	; (800495c <UART_SetConfig+0xc14>)
 8004860:	e00c      	b.n	800487c <UART_SetConfig+0xb34>
 8004862:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <UART_SetConfig+0xc18>)
 8004864:	e00a      	b.n	800487c <UART_SetConfig+0xb34>
 8004866:	4b3f      	ldr	r3, [pc, #252]	; (8004964 <UART_SetConfig+0xc1c>)
 8004868:	e008      	b.n	800487c <UART_SetConfig+0xb34>
 800486a:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <UART_SetConfig+0xc20>)
 800486c:	e006      	b.n	800487c <UART_SetConfig+0xb34>
 800486e:	4b3f      	ldr	r3, [pc, #252]	; (800496c <UART_SetConfig+0xc24>)
 8004870:	e004      	b.n	800487c <UART_SetConfig+0xb34>
 8004872:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <UART_SetConfig+0xc28>)
 8004874:	e002      	b.n	800487c <UART_SetConfig+0xb34>
 8004876:	4b3f      	ldr	r3, [pc, #252]	; (8004974 <UART_SetConfig+0xc2c>)
 8004878:	e000      	b.n	800487c <UART_SetConfig+0xb34>
 800487a:	4b34      	ldr	r3, [pc, #208]	; (800494c <UART_SetConfig+0xc04>)
 800487c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800487e:	6852      	ldr	r2, [r2, #4]
 8004880:	0852      	lsrs	r2, r2, #1
 8004882:	189a      	adds	r2, r3, r2
 8004884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	0019      	movs	r1, r3
 800488a:	0010      	movs	r0, r2
 800488c:	f7fb fc3a 	bl	8000104 <__udivsi3>
 8004890:	0003      	movs	r3, r0
 8004892:	b29b      	uxth	r3, r3
 8004894:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004896:	e0ed      	b.n	8004a74 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004898:	f7fd ff88 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 800489c:	0003      	movs	r3, r0
 800489e:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d100      	bne.n	80048aa <UART_SetConfig+0xb62>
 80048a8:	e066      	b.n	8004978 <UART_SetConfig+0xc30>
 80048aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d03e      	beq.n	8004930 <UART_SetConfig+0xbe8>
 80048b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d038      	beq.n	800492c <UART_SetConfig+0xbe4>
 80048ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d032      	beq.n	8004928 <UART_SetConfig+0xbe0>
 80048c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d02c      	beq.n	8004924 <UART_SetConfig+0xbdc>
 80048ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	d026      	beq.n	8004920 <UART_SetConfig+0xbd8>
 80048d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	2b06      	cmp	r3, #6
 80048d8:	d020      	beq.n	800491c <UART_SetConfig+0xbd4>
 80048da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b07      	cmp	r3, #7
 80048e0:	d01a      	beq.n	8004918 <UART_SetConfig+0xbd0>
 80048e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d014      	beq.n	8004914 <UART_SetConfig+0xbcc>
 80048ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2b09      	cmp	r3, #9
 80048f0:	d00e      	beq.n	8004910 <UART_SetConfig+0xbc8>
 80048f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b0a      	cmp	r3, #10
 80048f8:	d008      	beq.n	800490c <UART_SetConfig+0xbc4>
 80048fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	2b0b      	cmp	r3, #11
 8004900:	d102      	bne.n	8004908 <UART_SetConfig+0xbc0>
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	e038      	b.n	800497a <UART_SetConfig+0xc32>
 8004908:	2301      	movs	r3, #1
 800490a:	e036      	b.n	800497a <UART_SetConfig+0xc32>
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	e034      	b.n	800497a <UART_SetConfig+0xc32>
 8004910:	2340      	movs	r3, #64	; 0x40
 8004912:	e032      	b.n	800497a <UART_SetConfig+0xc32>
 8004914:	2320      	movs	r3, #32
 8004916:	e030      	b.n	800497a <UART_SetConfig+0xc32>
 8004918:	2310      	movs	r3, #16
 800491a:	e02e      	b.n	800497a <UART_SetConfig+0xc32>
 800491c:	230c      	movs	r3, #12
 800491e:	e02c      	b.n	800497a <UART_SetConfig+0xc32>
 8004920:	230a      	movs	r3, #10
 8004922:	e02a      	b.n	800497a <UART_SetConfig+0xc32>
 8004924:	2308      	movs	r3, #8
 8004926:	e028      	b.n	800497a <UART_SetConfig+0xc32>
 8004928:	2306      	movs	r3, #6
 800492a:	e026      	b.n	800497a <UART_SetConfig+0xc32>
 800492c:	2304      	movs	r3, #4
 800492e:	e024      	b.n	800497a <UART_SetConfig+0xc32>
 8004930:	2302      	movs	r3, #2
 8004932:	e022      	b.n	800497a <UART_SetConfig+0xc32>
 8004934:	000aaa00 	.word	0x000aaa00
 8004938:	000ccc00 	.word	0x000ccc00
 800493c:	00155500 	.word	0x00155500
 8004940:	000002ff 	.word	0x000002ff
 8004944:	000fffff 	.word	0x000fffff
 8004948:	0001e848 	.word	0x0001e848
 800494c:	01e84800 	.word	0x01e84800
 8004950:	0003d090 	.word	0x0003d090
 8004954:	0007a120 	.word	0x0007a120
 8004958:	000f4240 	.word	0x000f4240
 800495c:	001e8480 	.word	0x001e8480
 8004960:	0028b0aa 	.word	0x0028b0aa
 8004964:	0030d400 	.word	0x0030d400
 8004968:	003d0900 	.word	0x003d0900
 800496c:	00516154 	.word	0x00516154
 8004970:	007a1200 	.word	0x007a1200
 8004974:	00f42400 	.word	0x00f42400
 8004978:	2301      	movs	r3, #1
 800497a:	0019      	movs	r1, r3
 800497c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800497e:	f7fb fbc1 	bl	8000104 <__udivsi3>
 8004982:	0003      	movs	r3, r0
 8004984:	005a      	lsls	r2, r3, #1
 8004986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	18d2      	adds	r2, r2, r3
 800498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	0019      	movs	r1, r3
 8004994:	0010      	movs	r0, r2
 8004996:	f7fb fbb5 	bl	8000104 <__udivsi3>
 800499a:	0003      	movs	r3, r0
 800499c:	b29b      	uxth	r3, r3
 800499e:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80049a0:	e068      	b.n	8004a74 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d04c      	beq.n	8004a44 <UART_SetConfig+0xcfc>
 80049aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d045      	beq.n	8004a3e <UART_SetConfig+0xcf6>
 80049b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d03e      	beq.n	8004a38 <UART_SetConfig+0xcf0>
 80049ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d038      	beq.n	8004a34 <UART_SetConfig+0xcec>
 80049c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d031      	beq.n	8004a2e <UART_SetConfig+0xce6>
 80049ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d02b      	beq.n	8004a2a <UART_SetConfig+0xce2>
 80049d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d025      	beq.n	8004a26 <UART_SetConfig+0xcde>
 80049da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	2b07      	cmp	r3, #7
 80049e0:	d01e      	beq.n	8004a20 <UART_SetConfig+0xcd8>
 80049e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d017      	beq.n	8004a1a <UART_SetConfig+0xcd2>
 80049ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2b09      	cmp	r3, #9
 80049f0:	d010      	beq.n	8004a14 <UART_SetConfig+0xccc>
 80049f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	2b0a      	cmp	r3, #10
 80049f8:	d009      	beq.n	8004a0e <UART_SetConfig+0xcc6>
 80049fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	2b0b      	cmp	r3, #11
 8004a00:	d102      	bne.n	8004a08 <UART_SetConfig+0xcc0>
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	e01f      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	025b      	lsls	r3, r3, #9
 8004a0c:	e01c      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	e019      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	e016      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	e013      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	015b      	lsls	r3, r3, #5
 8004a24:	e010      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a26:	4bb7      	ldr	r3, [pc, #732]	; (8004d04 <UART_SetConfig+0xfbc>)
 8004a28:	e00e      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a2a:	4bb7      	ldr	r3, [pc, #732]	; (8004d08 <UART_SetConfig+0xfc0>)
 8004a2c:	e00c      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	019b      	lsls	r3, r3, #6
 8004a32:	e009      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a34:	4bb5      	ldr	r3, [pc, #724]	; (8004d0c <UART_SetConfig+0xfc4>)
 8004a36:	e007      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	01db      	lsls	r3, r3, #7
 8004a3c:	e004      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a3e:	2380      	movs	r3, #128	; 0x80
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	e001      	b.n	8004a48 <UART_SetConfig+0xd00>
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	025b      	lsls	r3, r3, #9
 8004a48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a4a:	6852      	ldr	r2, [r2, #4]
 8004a4c:	0852      	lsrs	r2, r2, #1
 8004a4e:	189a      	adds	r2, r3, r2
 8004a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	0019      	movs	r1, r3
 8004a56:	0010      	movs	r0, r2
 8004a58:	f7fb fb54 	bl	8000104 <__udivsi3>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004a62:	e007      	b.n	8004a74 <UART_SetConfig+0xd2c>
      default:
        ret = HAL_ERROR;
 8004a64:	231b      	movs	r3, #27
 8004a66:	2258      	movs	r2, #88	; 0x58
 8004a68:	4694      	mov	ip, r2
 8004a6a:	44bc      	add	ip, r7
 8004a6c:	4463      	add	r3, ip
 8004a6e:	2201      	movs	r2, #1
 8004a70:	701a      	strb	r2, [r3, #0]
        break;
 8004a72:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a76:	2b0f      	cmp	r3, #15
 8004a78:	d920      	bls.n	8004abc <UART_SetConfig+0xd74>
 8004a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7c:	4aa4      	ldr	r2, [pc, #656]	; (8004d10 <UART_SetConfig+0xfc8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d81c      	bhi.n	8004abc <UART_SetConfig+0xd74>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	200e      	movs	r0, #14
 8004a88:	2458      	movs	r4, #88	; 0x58
 8004a8a:	193b      	adds	r3, r7, r4
 8004a8c:	181b      	adds	r3, r3, r0
 8004a8e:	210f      	movs	r1, #15
 8004a90:	438a      	bics	r2, r1
 8004a92:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2207      	movs	r2, #7
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b299      	uxth	r1, r3
 8004aa0:	193b      	adds	r3, r7, r4
 8004aa2:	181b      	adds	r3, r3, r0
 8004aa4:	193a      	adds	r2, r7, r4
 8004aa6:	1812      	adds	r2, r2, r0
 8004aa8:	8812      	ldrh	r2, [r2, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	193a      	adds	r2, r7, r4
 8004ab4:	1812      	adds	r2, r2, r0
 8004ab6:	8812      	ldrh	r2, [r2, #0]
 8004ab8:	60da      	str	r2, [r3, #12]
 8004aba:	e1d3      	b.n	8004e64 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8004abc:	231b      	movs	r3, #27
 8004abe:	2258      	movs	r2, #88	; 0x58
 8004ac0:	4694      	mov	ip, r2
 8004ac2:	44bc      	add	ip, r7
 8004ac4:	4463      	add	r3, ip
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	e1cb      	b.n	8004e64 <UART_SetConfig+0x111c>
    }
  }
  else
  {
    switch (clocksource)
 8004acc:	2323      	movs	r3, #35	; 0x23
 8004ace:	2258      	movs	r2, #88	; 0x58
 8004ad0:	4694      	mov	ip, r2
 8004ad2:	44bc      	add	ip, r7
 8004ad4:	4463      	add	r3, ip
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d100      	bne.n	8004ade <UART_SetConfig+0xd96>
 8004adc:	e06c      	b.n	8004bb8 <UART_SetConfig+0xe70>
 8004ade:	dc02      	bgt.n	8004ae6 <UART_SetConfig+0xd9e>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <UART_SetConfig+0xdac>
 8004ae4:	e1a3      	b.n	8004e2e <UART_SetConfig+0x10e6>
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d100      	bne.n	8004aec <UART_SetConfig+0xda4>
 8004aea:	e0bc      	b.n	8004c66 <UART_SetConfig+0xf1e>
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d100      	bne.n	8004af2 <UART_SetConfig+0xdaa>
 8004af0:	e13d      	b.n	8004d6e <UART_SetConfig+0x1026>
 8004af2:	e19c      	b.n	8004e2e <UART_SetConfig+0x10e6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af4:	f7fd fee6 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8004af8:	0003      	movs	r3, r0
 8004afa:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d044      	beq.n	8004b8e <UART_SetConfig+0xe46>
 8004b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d03e      	beq.n	8004b8a <UART_SetConfig+0xe42>
 8004b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d038      	beq.n	8004b86 <UART_SetConfig+0xe3e>
 8004b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d032      	beq.n	8004b82 <UART_SetConfig+0xe3a>
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d02c      	beq.n	8004b7e <UART_SetConfig+0xe36>
 8004b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	2b05      	cmp	r3, #5
 8004b2a:	d026      	beq.n	8004b7a <UART_SetConfig+0xe32>
 8004b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	2b06      	cmp	r3, #6
 8004b32:	d020      	beq.n	8004b76 <UART_SetConfig+0xe2e>
 8004b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	2b07      	cmp	r3, #7
 8004b3a:	d01a      	beq.n	8004b72 <UART_SetConfig+0xe2a>
 8004b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d014      	beq.n	8004b6e <UART_SetConfig+0xe26>
 8004b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	2b09      	cmp	r3, #9
 8004b4a:	d00e      	beq.n	8004b6a <UART_SetConfig+0xe22>
 8004b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2b0a      	cmp	r3, #10
 8004b52:	d008      	beq.n	8004b66 <UART_SetConfig+0xe1e>
 8004b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2b0b      	cmp	r3, #11
 8004b5a:	d102      	bne.n	8004b62 <UART_SetConfig+0xe1a>
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	e016      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e014      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	e012      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b6a:	2340      	movs	r3, #64	; 0x40
 8004b6c:	e010      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b6e:	2320      	movs	r3, #32
 8004b70:	e00e      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b72:	2310      	movs	r3, #16
 8004b74:	e00c      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b76:	230c      	movs	r3, #12
 8004b78:	e00a      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b7a:	230a      	movs	r3, #10
 8004b7c:	e008      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b7e:	2308      	movs	r3, #8
 8004b80:	e006      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b82:	2306      	movs	r3, #6
 8004b84:	e004      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e002      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e000      	b.n	8004b90 <UART_SetConfig+0xe48>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	0019      	movs	r1, r3
 8004b92:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004b94:	f7fb fab6 	bl	8000104 <__udivsi3>
 8004b98:	0003      	movs	r3, r0
 8004b9a:	001a      	movs	r2, r3
 8004b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	18d2      	adds	r2, r2, r3
 8004ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	0019      	movs	r1, r3
 8004baa:	0010      	movs	r0, r2
 8004bac:	f7fb faaa 	bl	8000104 <__udivsi3>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004bb6:	e142      	b.n	8004e3e <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d043      	beq.n	8004c48 <UART_SetConfig+0xf00>
 8004bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d03d      	beq.n	8004c44 <UART_SetConfig+0xefc>
 8004bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d037      	beq.n	8004c40 <UART_SetConfig+0xef8>
 8004bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d031      	beq.n	8004c3c <UART_SetConfig+0xef4>
 8004bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d02b      	beq.n	8004c38 <UART_SetConfig+0xef0>
 8004be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	2b05      	cmp	r3, #5
 8004be6:	d025      	beq.n	8004c34 <UART_SetConfig+0xeec>
 8004be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	2b06      	cmp	r3, #6
 8004bee:	d01f      	beq.n	8004c30 <UART_SetConfig+0xee8>
 8004bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	2b07      	cmp	r3, #7
 8004bf6:	d019      	beq.n	8004c2c <UART_SetConfig+0xee4>
 8004bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d013      	beq.n	8004c28 <UART_SetConfig+0xee0>
 8004c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	2b09      	cmp	r3, #9
 8004c06:	d00d      	beq.n	8004c24 <UART_SetConfig+0xedc>
 8004c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	2b0a      	cmp	r3, #10
 8004c0e:	d007      	beq.n	8004c20 <UART_SetConfig+0xed8>
 8004c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	2b0b      	cmp	r3, #11
 8004c16:	d101      	bne.n	8004c1c <UART_SetConfig+0xed4>
 8004c18:	4b3e      	ldr	r3, [pc, #248]	; (8004d14 <UART_SetConfig+0xfcc>)
 8004c1a:	e016      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c1c:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <UART_SetConfig+0xfd0>)
 8004c1e:	e014      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c20:	4b3e      	ldr	r3, [pc, #248]	; (8004d1c <UART_SetConfig+0xfd4>)
 8004c22:	e012      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c24:	4b3e      	ldr	r3, [pc, #248]	; (8004d20 <UART_SetConfig+0xfd8>)
 8004c26:	e010      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c28:	4b3e      	ldr	r3, [pc, #248]	; (8004d24 <UART_SetConfig+0xfdc>)
 8004c2a:	e00e      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c2c:	4b3e      	ldr	r3, [pc, #248]	; (8004d28 <UART_SetConfig+0xfe0>)
 8004c2e:	e00c      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c30:	4b3e      	ldr	r3, [pc, #248]	; (8004d2c <UART_SetConfig+0xfe4>)
 8004c32:	e00a      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c34:	4b3e      	ldr	r3, [pc, #248]	; (8004d30 <UART_SetConfig+0xfe8>)
 8004c36:	e008      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c38:	4b3e      	ldr	r3, [pc, #248]	; (8004d34 <UART_SetConfig+0xfec>)
 8004c3a:	e006      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c3c:	4b3e      	ldr	r3, [pc, #248]	; (8004d38 <UART_SetConfig+0xff0>)
 8004c3e:	e004      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c40:	4b3e      	ldr	r3, [pc, #248]	; (8004d3c <UART_SetConfig+0xff4>)
 8004c42:	e002      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c44:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <UART_SetConfig+0xff8>)
 8004c46:	e000      	b.n	8004c4a <UART_SetConfig+0xf02>
 8004c48:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <UART_SetConfig+0xfd0>)
 8004c4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c4c:	6852      	ldr	r2, [r2, #4]
 8004c4e:	0852      	lsrs	r2, r2, #1
 8004c50:	189a      	adds	r2, r3, r2
 8004c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	0019      	movs	r1, r3
 8004c58:	0010      	movs	r0, r2
 8004c5a:	f7fb fa53 	bl	8000104 <__udivsi3>
 8004c5e:	0003      	movs	r3, r0
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004c64:	e0eb      	b.n	8004e3e <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c66:	f7fd fda1 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8004c6a:	0003      	movs	r3, r0
 8004c6c:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d100      	bne.n	8004c78 <UART_SetConfig+0xf30>
 8004c76:	e065      	b.n	8004d44 <UART_SetConfig+0xffc>
 8004c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d03e      	beq.n	8004cfe <UART_SetConfig+0xfb6>
 8004c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d038      	beq.n	8004cfa <UART_SetConfig+0xfb2>
 8004c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d032      	beq.n	8004cf6 <UART_SetConfig+0xfae>
 8004c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d02c      	beq.n	8004cf2 <UART_SetConfig+0xfaa>
 8004c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	2b05      	cmp	r3, #5
 8004c9e:	d026      	beq.n	8004cee <UART_SetConfig+0xfa6>
 8004ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	2b06      	cmp	r3, #6
 8004ca6:	d020      	beq.n	8004cea <UART_SetConfig+0xfa2>
 8004ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2b07      	cmp	r3, #7
 8004cae:	d01a      	beq.n	8004ce6 <UART_SetConfig+0xf9e>
 8004cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d014      	beq.n	8004ce2 <UART_SetConfig+0xf9a>
 8004cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b09      	cmp	r3, #9
 8004cbe:	d00e      	beq.n	8004cde <UART_SetConfig+0xf96>
 8004cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	2b0a      	cmp	r3, #10
 8004cc6:	d008      	beq.n	8004cda <UART_SetConfig+0xf92>
 8004cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2b0b      	cmp	r3, #11
 8004cce:	d102      	bne.n	8004cd6 <UART_SetConfig+0xf8e>
 8004cd0:	2380      	movs	r3, #128	; 0x80
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	e037      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e035      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004cda:	2380      	movs	r3, #128	; 0x80
 8004cdc:	e033      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004cde:	2340      	movs	r3, #64	; 0x40
 8004ce0:	e031      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	e02f      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004ce6:	2310      	movs	r3, #16
 8004ce8:	e02d      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004cea:	230c      	movs	r3, #12
 8004cec:	e02b      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004cee:	230a      	movs	r3, #10
 8004cf0:	e029      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	e027      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004cf6:	2306      	movs	r3, #6
 8004cf8:	e025      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	e023      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e021      	b.n	8004d46 <UART_SetConfig+0xffe>
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	00001554 	.word	0x00001554
 8004d08:	00001998 	.word	0x00001998
 8004d0c:	00002aaa 	.word	0x00002aaa
 8004d10:	0000ffff 	.word	0x0000ffff
 8004d14:	0000f424 	.word	0x0000f424
 8004d18:	00f42400 	.word	0x00f42400
 8004d1c:	0001e848 	.word	0x0001e848
 8004d20:	0003d090 	.word	0x0003d090
 8004d24:	0007a120 	.word	0x0007a120
 8004d28:	000f4240 	.word	0x000f4240
 8004d2c:	00145855 	.word	0x00145855
 8004d30:	00186a00 	.word	0x00186a00
 8004d34:	001e8480 	.word	0x001e8480
 8004d38:	0028b0aa 	.word	0x0028b0aa
 8004d3c:	003d0900 	.word	0x003d0900
 8004d40:	007a1200 	.word	0x007a1200
 8004d44:	2301      	movs	r3, #1
 8004d46:	0019      	movs	r1, r3
 8004d48:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004d4a:	f7fb f9db 	bl	8000104 <__udivsi3>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	001a      	movs	r2, r3
 8004d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	18d2      	adds	r2, r2, r3
 8004d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	0019      	movs	r1, r3
 8004d60:	0010      	movs	r0, r2
 8004d62:	f7fb f9cf 	bl	8000104 <__udivsi3>
 8004d66:	0003      	movs	r3, r0
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004d6c:	e067      	b.n	8004e3e <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d04b      	beq.n	8004e0e <UART_SetConfig+0x10c6>
 8004d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d044      	beq.n	8004e08 <UART_SetConfig+0x10c0>
 8004d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d03d      	beq.n	8004e02 <UART_SetConfig+0x10ba>
 8004d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d037      	beq.n	8004dfe <UART_SetConfig+0x10b6>
 8004d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d030      	beq.n	8004df8 <UART_SetConfig+0x10b0>
 8004d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	d02a      	beq.n	8004df4 <UART_SetConfig+0x10ac>
 8004d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d024      	beq.n	8004df0 <UART_SetConfig+0x10a8>
 8004da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	2b07      	cmp	r3, #7
 8004dac:	d01d      	beq.n	8004dea <UART_SetConfig+0x10a2>
 8004dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d016      	beq.n	8004de4 <UART_SetConfig+0x109c>
 8004db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	2b09      	cmp	r3, #9
 8004dbc:	d00f      	beq.n	8004dde <UART_SetConfig+0x1096>
 8004dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	2b0a      	cmp	r3, #10
 8004dc4:	d008      	beq.n	8004dd8 <UART_SetConfig+0x1090>
 8004dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	2b0b      	cmp	r3, #11
 8004dcc:	d101      	bne.n	8004dd2 <UART_SetConfig+0x108a>
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	e01f      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	e01c      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	e019      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	e016      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	e013      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	e010      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004df0:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <UART_SetConfig+0x114c>)
 8004df2:	e00e      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004df4:	4b28      	ldr	r3, [pc, #160]	; (8004e98 <UART_SetConfig+0x1150>)
 8004df6:	e00c      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	015b      	lsls	r3, r3, #5
 8004dfc:	e009      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004dfe:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <UART_SetConfig+0x1154>)
 8004e00:	e007      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	019b      	lsls	r3, r3, #6
 8004e06:	e004      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	01db      	lsls	r3, r3, #7
 8004e0c:	e001      	b.n	8004e12 <UART_SetConfig+0x10ca>
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e14:	6852      	ldr	r2, [r2, #4]
 8004e16:	0852      	lsrs	r2, r2, #1
 8004e18:	189a      	adds	r2, r3, r2
 8004e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	0019      	movs	r1, r3
 8004e20:	0010      	movs	r0, r2
 8004e22:	f7fb f96f 	bl	8000104 <__udivsi3>
 8004e26:	0003      	movs	r3, r0
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004e2c:	e007      	b.n	8004e3e <UART_SetConfig+0x10f6>
      default:
        ret = HAL_ERROR;
 8004e2e:	231b      	movs	r3, #27
 8004e30:	2258      	movs	r2, #88	; 0x58
 8004e32:	4694      	mov	ip, r2
 8004e34:	44bc      	add	ip, r7
 8004e36:	4463      	add	r3, ip
 8004e38:	2201      	movs	r2, #1
 8004e3a:	701a      	strb	r2, [r3, #0]
        break;
 8004e3c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e40:	2b0f      	cmp	r3, #15
 8004e42:	d908      	bls.n	8004e56 <UART_SetConfig+0x110e>
 8004e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e46:	4a16      	ldr	r2, [pc, #88]	; (8004ea0 <UART_SetConfig+0x1158>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d804      	bhi.n	8004e56 <UART_SetConfig+0x110e>
    {
      huart->Instance->BRR = usartdiv;
 8004e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e52:	60da      	str	r2, [r3, #12]
 8004e54:	e006      	b.n	8004e64 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8004e56:	231b      	movs	r3, #27
 8004e58:	2258      	movs	r2, #88	; 0x58
 8004e5a:	4694      	mov	ip, r2
 8004e5c:	44bc      	add	ip, r7
 8004e5e:	4463      	add	r3, ip
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e66:	226a      	movs	r2, #106	; 0x6a
 8004e68:	2101      	movs	r1, #1
 8004e6a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e6e:	2268      	movs	r2, #104	; 0x68
 8004e70:	2101      	movs	r1, #1
 8004e72:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e76:	2200      	movs	r2, #0
 8004e78:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004e80:	231b      	movs	r3, #27
 8004e82:	2258      	movs	r2, #88	; 0x58
 8004e84:	4694      	mov	ip, r2
 8004e86:	44bc      	add	ip, r7
 8004e88:	4463      	add	r3, ip
 8004e8a:	781b      	ldrb	r3, [r3, #0]
}
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b021      	add	sp, #132	; 0x84
 8004e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e94:	00000aaa 	.word	0x00000aaa
 8004e98:	00000ccc 	.word	0x00000ccc
 8004e9c:	00001555 	.word	0x00001555
 8004ea0:	0000ffff 	.word	0x0000ffff

08004ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a4a      	ldr	r2, [pc, #296]	; (8004fe8 <UART_AdvFeatureConfig+0x144>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4a43      	ldr	r2, [pc, #268]	; (8004fec <UART_AdvFeatureConfig+0x148>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d00b      	beq.n	8004f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	4a3b      	ldr	r2, [pc, #236]	; (8004ff0 <UART_AdvFeatureConfig+0x14c>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	0019      	movs	r1, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	2208      	movs	r2, #8
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4a34      	ldr	r2, [pc, #208]	; (8004ff4 <UART_AdvFeatureConfig+0x150>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	0019      	movs	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	2210      	movs	r2, #16
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d00b      	beq.n	8004f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <UART_AdvFeatureConfig+0x154>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	0019      	movs	r1, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d00b      	beq.n	8004f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4a25      	ldr	r2, [pc, #148]	; (8004ffc <UART_AdvFeatureConfig+0x158>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	0019      	movs	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	2240      	movs	r2, #64	; 0x40
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d01d      	beq.n	8004fbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <UART_AdvFeatureConfig+0x15c>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	035b      	lsls	r3, r3, #13
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d10b      	bne.n	8004fbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4a15      	ldr	r2, [pc, #84]	; (8005004 <UART_AdvFeatureConfig+0x160>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	2280      	movs	r2, #128	; 0x80
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4a0e      	ldr	r2, [pc, #56]	; (8005008 <UART_AdvFeatureConfig+0x164>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  }
}
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b002      	add	sp, #8
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	fffdffff 	.word	0xfffdffff
 8004fec:	fffeffff 	.word	0xfffeffff
 8004ff0:	fffbffff 	.word	0xfffbffff
 8004ff4:	ffff7fff 	.word	0xffff7fff
 8004ff8:	ffffefff 	.word	0xffffefff
 8004ffc:	ffffdfff 	.word	0xffffdfff
 8005000:	ffefffff 	.word	0xffefffff
 8005004:	ff9fffff 	.word	0xff9fffff
 8005008:	fff7ffff 	.word	0xfff7ffff

0800500c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af02      	add	r7, sp, #8
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2288      	movs	r2, #136	; 0x88
 8005018:	2100      	movs	r1, #0
 800501a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800501c:	f7fb ff98 	bl	8000f50 <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2208      	movs	r2, #8
 800502c:	4013      	ands	r3, r2
 800502e:	2b08      	cmp	r3, #8
 8005030:	d10d      	bne.n	800504e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	0399      	lsls	r1, r3, #14
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4b18      	ldr	r3, [pc, #96]	; (800509c <UART_CheckIdleState+0x90>)
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	0013      	movs	r3, r2
 8005040:	2200      	movs	r2, #0
 8005042:	f000 f82d 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 8005046:	1e03      	subs	r3, r0, #0
 8005048:	d001      	beq.n	800504e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e021      	b.n	8005092 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2204      	movs	r2, #4
 8005056:	4013      	ands	r3, r2
 8005058:	2b04      	cmp	r3, #4
 800505a:	d10d      	bne.n	8005078 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	03d9      	lsls	r1, r3, #15
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4b0d      	ldr	r3, [pc, #52]	; (800509c <UART_CheckIdleState+0x90>)
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	0013      	movs	r3, r2
 800506a:	2200      	movs	r2, #0
 800506c:	f000 f818 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 8005070:	1e03      	subs	r3, r0, #0
 8005072:	d001      	beq.n	8005078 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e00c      	b.n	8005092 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2280      	movs	r2, #128	; 0x80
 800507c:	2120      	movs	r1, #32
 800507e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2284      	movs	r2, #132	; 0x84
 8005084:	2120      	movs	r1, #32
 8005086:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	227c      	movs	r2, #124	; 0x7c
 800508c:	2100      	movs	r1, #0
 800508e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	0018      	movs	r0, r3
 8005094:	46bd      	mov	sp, r7
 8005096:	b004      	add	sp, #16
 8005098:	bd80      	pop	{r7, pc}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	01ffffff 	.word	0x01ffffff

080050a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	1dfb      	adds	r3, r7, #7
 80050ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b0:	e02b      	b.n	800510a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	3301      	adds	r3, #1
 80050b6:	d028      	beq.n	800510a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b8:	f7fb ff4a 	bl	8000f50 <HAL_GetTick>
 80050bc:	0002      	movs	r2, r0
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d302      	bcc.n	80050ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d11d      	bne.n	800510a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4916      	ldr	r1, [pc, #88]	; (8005134 <UART_WaitOnFlagUntilTimeout+0x94>)
 80050da:	400a      	ands	r2, r1
 80050dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2101      	movs	r1, #1
 80050ea:	438a      	bics	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2280      	movs	r2, #128	; 0x80
 80050f2:	2120      	movs	r1, #32
 80050f4:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2284      	movs	r2, #132	; 0x84
 80050fa:	2120      	movs	r1, #32
 80050fc:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	227c      	movs	r2, #124	; 0x7c
 8005102:	2100      	movs	r1, #0
 8005104:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e00f      	b.n	800512a <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	4013      	ands	r3, r2
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	425a      	negs	r2, r3
 800511a:	4153      	adcs	r3, r2
 800511c:	b2db      	uxtb	r3, r3
 800511e:	001a      	movs	r2, r3
 8005120:	1dfb      	adds	r3, r7, #7
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d0c4      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	0018      	movs	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	b004      	add	sp, #16
 8005130:	bd80      	pop	{r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	fffffe5f 	.word	0xfffffe5f

08005138 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	227c      	movs	r2, #124	; 0x7c
 8005144:	5c9b      	ldrb	r3, [r3, r2]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_UARTEx_DisableFifoMode+0x16>
 800514a:	2302      	movs	r3, #2
 800514c:	e027      	b.n	800519e <HAL_UARTEx_DisableFifoMode+0x66>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	227c      	movs	r2, #124	; 0x7c
 8005152:	2101      	movs	r1, #1
 8005154:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2280      	movs	r2, #128	; 0x80
 800515a:	2124      	movs	r1, #36	; 0x24
 800515c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2101      	movs	r1, #1
 8005172:	438a      	bics	r2, r1
 8005174:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a0b      	ldr	r2, [pc, #44]	; (80051a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800517a:	4013      	ands	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2280      	movs	r2, #128	; 0x80
 8005190:	2120      	movs	r1, #32
 8005192:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	227c      	movs	r2, #124	; 0x7c
 8005198:	2100      	movs	r1, #0
 800519a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	0018      	movs	r0, r3
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b004      	add	sp, #16
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	dfffffff 	.word	0xdfffffff

080051ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	227c      	movs	r2, #124	; 0x7c
 80051ba:	5c9b      	ldrb	r3, [r3, r2]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e02e      	b.n	8005222 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	227c      	movs	r2, #124	; 0x7c
 80051c8:	2101      	movs	r1, #1
 80051ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	2124      	movs	r1, #36	; 0x24
 80051d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2101      	movs	r1, #1
 80051e8:	438a      	bics	r2, r1
 80051ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	08d9      	lsrs	r1, r3, #3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	0018      	movs	r0, r3
 8005204:	f000 f854 	bl	80052b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2280      	movs	r2, #128	; 0x80
 8005214:	2120      	movs	r1, #32
 8005216:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	227c      	movs	r2, #124	; 0x7c
 800521c:	2100      	movs	r1, #0
 800521e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	0018      	movs	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	b004      	add	sp, #16
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	227c      	movs	r2, #124	; 0x7c
 800523a:	5c9b      	ldrb	r3, [r3, r2]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005240:	2302      	movs	r3, #2
 8005242:	e02f      	b.n	80052a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	227c      	movs	r2, #124	; 0x7c
 8005248:	2101      	movs	r1, #1
 800524a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	2124      	movs	r1, #36	; 0x24
 8005252:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2101      	movs	r1, #1
 8005268:	438a      	bics	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005274:	4013      	ands	r3, r2
 8005276:	0019      	movs	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	0018      	movs	r0, r3
 8005286:	f000 f813 	bl	80052b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2280      	movs	r2, #128	; 0x80
 8005296:	2120      	movs	r1, #32
 8005298:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	227c      	movs	r2, #124	; 0x7c
 800529e:	2100      	movs	r1, #0
 80052a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	0018      	movs	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b004      	add	sp, #16
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	f1ffffff 	.word	0xf1ffffff

080052b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b2:	b089      	sub	sp, #36	; 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80052b8:	2314      	movs	r3, #20
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	4a2f      	ldr	r2, [pc, #188]	; (800537c <UARTEx_SetNbDataToProcess+0xcc>)
 80052be:	ca03      	ldmia	r2!, {r0, r1}
 80052c0:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80052c2:	230c      	movs	r3, #12
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	4a2e      	ldr	r2, [pc, #184]	; (8005380 <UARTEx_SetNbDataToProcess+0xd0>)
 80052c8:	ca03      	ldmia	r2!, {r0, r1}
 80052ca:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d108      	bne.n	80052e6 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	226a      	movs	r2, #106	; 0x6a
 80052d8:	2101      	movs	r1, #1
 80052da:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2268      	movs	r2, #104	; 0x68
 80052e0:	2101      	movs	r1, #1
 80052e2:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052e4:	e046      	b.n	8005374 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052e6:	261f      	movs	r6, #31
 80052e8:	19bb      	adds	r3, r7, r6
 80052ea:	2208      	movs	r2, #8
 80052ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052ee:	201e      	movs	r0, #30
 80052f0:	183b      	adds	r3, r7, r0
 80052f2:	2208      	movs	r2, #8
 80052f4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	0e5b      	lsrs	r3, r3, #25
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	241d      	movs	r4, #29
 8005302:	193b      	adds	r3, r7, r4
 8005304:	2107      	movs	r1, #7
 8005306:	400a      	ands	r2, r1
 8005308:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	0f5b      	lsrs	r3, r3, #29
 8005312:	b2da      	uxtb	r2, r3
 8005314:	251c      	movs	r5, #28
 8005316:	197b      	adds	r3, r7, r5
 8005318:	2107      	movs	r1, #7
 800531a:	400a      	ands	r2, r1
 800531c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800531e:	183b      	adds	r3, r7, r0
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	197a      	adds	r2, r7, r5
 8005324:	7812      	ldrb	r2, [r2, #0]
 8005326:	2114      	movs	r1, #20
 8005328:	1879      	adds	r1, r7, r1
 800532a:	5c8a      	ldrb	r2, [r1, r2]
 800532c:	435a      	muls	r2, r3
 800532e:	0010      	movs	r0, r2
 8005330:	197b      	adds	r3, r7, r5
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	250c      	movs	r5, #12
 8005336:	197a      	adds	r2, r7, r5
 8005338:	5cd3      	ldrb	r3, [r2, r3]
 800533a:	0019      	movs	r1, r3
 800533c:	f7fa ff6c 	bl	8000218 <__divsi3>
 8005340:	0003      	movs	r3, r0
 8005342:	b299      	uxth	r1, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	226a      	movs	r2, #106	; 0x6a
 8005348:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800534a:	19bb      	adds	r3, r7, r6
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	193a      	adds	r2, r7, r4
 8005350:	7812      	ldrb	r2, [r2, #0]
 8005352:	2114      	movs	r1, #20
 8005354:	1879      	adds	r1, r7, r1
 8005356:	5c8a      	ldrb	r2, [r1, r2]
 8005358:	435a      	muls	r2, r3
 800535a:	0010      	movs	r0, r2
 800535c:	193b      	adds	r3, r7, r4
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	197a      	adds	r2, r7, r5
 8005362:	5cd3      	ldrb	r3, [r2, r3]
 8005364:	0019      	movs	r1, r3
 8005366:	f7fa ff57 	bl	8000218 <__divsi3>
 800536a:	0003      	movs	r3, r0
 800536c:	b299      	uxth	r1, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2268      	movs	r2, #104	; 0x68
 8005372:	5299      	strh	r1, [r3, r2]
}
 8005374:	46c0      	nop			; (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b009      	add	sp, #36	; 0x24
 800537a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800537c:	080053f4 	.word	0x080053f4
 8005380:	080053fc 	.word	0x080053fc

08005384 <__libc_init_array>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	2600      	movs	r6, #0
 8005388:	4d0c      	ldr	r5, [pc, #48]	; (80053bc <__libc_init_array+0x38>)
 800538a:	4c0d      	ldr	r4, [pc, #52]	; (80053c0 <__libc_init_array+0x3c>)
 800538c:	1b64      	subs	r4, r4, r5
 800538e:	10a4      	asrs	r4, r4, #2
 8005390:	42a6      	cmp	r6, r4
 8005392:	d109      	bne.n	80053a8 <__libc_init_array+0x24>
 8005394:	2600      	movs	r6, #0
 8005396:	f000 f821 	bl	80053dc <_init>
 800539a:	4d0a      	ldr	r5, [pc, #40]	; (80053c4 <__libc_init_array+0x40>)
 800539c:	4c0a      	ldr	r4, [pc, #40]	; (80053c8 <__libc_init_array+0x44>)
 800539e:	1b64      	subs	r4, r4, r5
 80053a0:	10a4      	asrs	r4, r4, #2
 80053a2:	42a6      	cmp	r6, r4
 80053a4:	d105      	bne.n	80053b2 <__libc_init_array+0x2e>
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
 80053a8:	00b3      	lsls	r3, r6, #2
 80053aa:	58eb      	ldr	r3, [r5, r3]
 80053ac:	4798      	blx	r3
 80053ae:	3601      	adds	r6, #1
 80053b0:	e7ee      	b.n	8005390 <__libc_init_array+0xc>
 80053b2:	00b3      	lsls	r3, r6, #2
 80053b4:	58eb      	ldr	r3, [r5, r3]
 80053b6:	4798      	blx	r3
 80053b8:	3601      	adds	r6, #1
 80053ba:	e7f2      	b.n	80053a2 <__libc_init_array+0x1e>
 80053bc:	080054c0 	.word	0x080054c0
 80053c0:	080054c0 	.word	0x080054c0
 80053c4:	080054c0 	.word	0x080054c0
 80053c8:	080054c4 	.word	0x080054c4

080053cc <memset>:
 80053cc:	0003      	movs	r3, r0
 80053ce:	1812      	adds	r2, r2, r0
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d100      	bne.n	80053d6 <memset+0xa>
 80053d4:	4770      	bx	lr
 80053d6:	7019      	strb	r1, [r3, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	e7f9      	b.n	80053d0 <memset+0x4>

080053dc <_init>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e2:	bc08      	pop	{r3}
 80053e4:	469e      	mov	lr, r3
 80053e6:	4770      	bx	lr

080053e8 <_fini>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr
